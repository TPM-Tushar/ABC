//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ECDataAPI.FileDownloadUploadService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="FileDownloadUploadService.IDownloadUploadFiles")]
    public interface IDownloadUploadFiles {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDownloadUploadFiles/UploadDocuments", ReplyAction="http://tempuri.org/IDownloadUploadFiles/UploadDocumentsResponse")]
        string UploadDocuments(byte[] bInputData, string sFileName, string sPath, string sDirName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDownloadUploadFiles/UploadDocuments", ReplyAction="http://tempuri.org/IDownloadUploadFiles/UploadDocumentsResponse")]
        System.Threading.Tasks.Task<string> UploadDocumentsAsync(byte[] bInputData, string sFileName, string sPath, string sDirName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDownloadUploadFiles/GetPdfFileLengthCount", ReplyAction="http://tempuri.org/IDownloadUploadFiles/GetPdfFileLengthCountResponse")]
        string GetPdfFileLengthCount(string sFileName, string sPath, string sDirName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDownloadUploadFiles/GetPdfFileLengthCount", ReplyAction="http://tempuri.org/IDownloadUploadFiles/GetPdfFileLengthCountResponse")]
        System.Threading.Tasks.Task<string> GetPdfFileLengthCountAsync(string sFileName, string sPath, string sDirName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDownloadUploadFiles/GetSHA1HashData", ReplyAction="http://tempuri.org/IDownloadUploadFiles/GetSHA1HashDataResponse")]
        string GetSHA1HashData(string data);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDownloadUploadFiles/GetSHA1HashData", ReplyAction="http://tempuri.org/IDownloadUploadFiles/GetSHA1HashDataResponse")]
        System.Threading.Tasks.Task<string> GetSHA1HashDataAsync(string data);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDownloadUploadFiles/ValidateSHA1HashData", ReplyAction="http://tempuri.org/IDownloadUploadFiles/ValidateSHA1HashDataResponse")]
        bool ValidateSHA1HashData(string inputData, string storedHashData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDownloadUploadFiles/ValidateSHA1HashData", ReplyAction="http://tempuri.org/IDownloadUploadFiles/ValidateSHA1HashDataResponse")]
        System.Threading.Tasks.Task<bool> ValidateSHA1HashDataAsync(string inputData, string storedHashData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDownloadUploadFiles/Upload", ReplyAction="http://tempuri.org/IDownloadUploadFiles/UploadResponse")]
        string Upload(byte[] bInputDate, long lOffset, string sFileName, string sdirectoryStructure);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDownloadUploadFiles/Upload", ReplyAction="http://tempuri.org/IDownloadUploadFiles/UploadResponse")]
        System.Threading.Tasks.Task<string> UploadAsync(byte[] bInputDate, long lOffset, string sFileName, string sdirectoryStructure);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDownloadUploadFiles/Download", ReplyAction="http://tempuri.org/IDownloadUploadFiles/DownloadResponse")]
        byte[] Download(string sFilePath, long lOffset, int iBufferSize);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDownloadUploadFiles/Download", ReplyAction="http://tempuri.org/IDownloadUploadFiles/DownloadResponse")]
        System.Threading.Tasks.Task<byte[]> DownloadAsync(string sFilePath, long lOffset, int iBufferSize);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDownloadUploadFiles/CreatePasswordProtedtedScannedDocument", ReplyAction="http://tempuri.org/IDownloadUploadFiles/CreatePasswordProtedtedScannedDocumentRes" +
            "ponse")]
        bool CreatePasswordProtedtedScannedDocument(string sFilePath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDownloadUploadFiles/CreatePasswordProtedtedScannedDocument", ReplyAction="http://tempuri.org/IDownloadUploadFiles/CreatePasswordProtedtedScannedDocumentRes" +
            "ponse")]
        System.Threading.Tasks.Task<bool> CreatePasswordProtedtedScannedDocumentAsync(string sFilePath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDownloadUploadFiles/GetFileSize", ReplyAction="http://tempuri.org/IDownloadUploadFiles/GetFileSizeResponse")]
        long GetFileSize(string sFilePath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDownloadUploadFiles/GetFileSize", ReplyAction="http://tempuri.org/IDownloadUploadFiles/GetFileSizeResponse")]
        System.Threading.Tasks.Task<long> GetFileSizeAsync(string sFilePath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDownloadUploadFiles/PageCount", ReplyAction="http://tempuri.org/IDownloadUploadFiles/PageCountResponse")]
        int PageCount(string sFilePath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDownloadUploadFiles/PageCount", ReplyAction="http://tempuri.org/IDownloadUploadFiles/PageCountResponse")]
        System.Threading.Tasks.Task<int> PageCountAsync(string sFilePath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDownloadUploadFiles/GetFileLenghtChecksum", ReplyAction="http://tempuri.org/IDownloadUploadFiles/GetFileLenghtChecksumResponse")]
        string GetFileLenghtChecksum(string sFilePath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDownloadUploadFiles/GetFileLenghtChecksum", ReplyAction="http://tempuri.org/IDownloadUploadFiles/GetFileLenghtChecksumResponse")]
        System.Threading.Tasks.Task<string> GetFileLenghtChecksumAsync(string sFilePath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDownloadUploadFiles/IsFileReadable", ReplyAction="http://tempuri.org/IDownloadUploadFiles/IsFileReadableResponse")]
        bool IsFileReadable(string sFileName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDownloadUploadFiles/IsFileReadable", ReplyAction="http://tempuri.org/IDownloadUploadFiles/IsFileReadableResponse")]
        System.Threading.Tasks.Task<bool> IsFileReadableAsync(string sFileName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDownloadUploadFiles/UploadImage", ReplyAction="http://tempuri.org/IDownloadUploadFiles/UploadImageResponse")]
        string UploadImage(byte[] bInputImageData, int imgWidth, int imgHeight, string sImagename, string sdirectoryStructure);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDownloadUploadFiles/UploadImage", ReplyAction="http://tempuri.org/IDownloadUploadFiles/UploadImageResponse")]
        System.Threading.Tasks.Task<string> UploadImageAsync(byte[] bInputImageData, int imgWidth, int imgHeight, string sImagename, string sdirectoryStructure);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDownloadUploadFiles/UploadImageWithVirtualPaths", ReplyAction="http://tempuri.org/IDownloadUploadFiles/UploadImageWithVirtualPathsResponse")]
        ECDataAPI.FileDownloadUploadService.UploadImageWithVirtualPathsResponse UploadImageWithVirtualPaths(ECDataAPI.FileDownloadUploadService.UploadImageWithVirtualPathsRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDownloadUploadFiles/UploadImageWithVirtualPaths", ReplyAction="http://tempuri.org/IDownloadUploadFiles/UploadImageWithVirtualPathsResponse")]
        System.Threading.Tasks.Task<ECDataAPI.FileDownloadUploadService.UploadImageWithVirtualPathsResponse> UploadImageWithVirtualPathsAsync(ECDataAPI.FileDownloadUploadService.UploadImageWithVirtualPathsRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDownloadUploadFiles/CopyExistingFile", ReplyAction="http://tempuri.org/IDownloadUploadFiles/CopyExistingFileResponse")]
        bool CopyExistingFile(string sSourceFilePath, string sDestinationFilePath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDownloadUploadFiles/CopyExistingFile", ReplyAction="http://tempuri.org/IDownloadUploadFiles/CopyExistingFileResponse")]
        System.Threading.Tasks.Task<bool> CopyExistingFileAsync(string sSourceFilePath, string sDestinationFilePath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDownloadUploadFiles/UploadWithVirtualPath", ReplyAction="http://tempuri.org/IDownloadUploadFiles/UploadWithVirtualPathResponse")]
        ECDataAPI.FileDownloadUploadService.UploadWithVirtualPathResponse UploadWithVirtualPath(ECDataAPI.FileDownloadUploadService.UploadWithVirtualPathRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDownloadUploadFiles/UploadWithVirtualPath", ReplyAction="http://tempuri.org/IDownloadUploadFiles/UploadWithVirtualPathResponse")]
        System.Threading.Tasks.Task<ECDataAPI.FileDownloadUploadService.UploadWithVirtualPathResponse> UploadWithVirtualPathAsync(ECDataAPI.FileDownloadUploadService.UploadWithVirtualPathRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDownloadUploadFiles/PageCountWithVirtualPath", ReplyAction="http://tempuri.org/IDownloadUploadFiles/PageCountWithVirtualPathResponse")]
        int PageCountWithVirtualPath(string sVirtualPath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDownloadUploadFiles/PageCountWithVirtualPath", ReplyAction="http://tempuri.org/IDownloadUploadFiles/PageCountWithVirtualPathResponse")]
        System.Threading.Tasks.Task<int> PageCountWithVirtualPathAsync(string sVirtualPath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDownloadUploadFiles/GetFullPath", ReplyAction="http://tempuri.org/IDownloadUploadFiles/GetFullPathResponse")]
        string GetFullPath(string sVirtualPath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDownloadUploadFiles/GetFullPath", ReplyAction="http://tempuri.org/IDownloadUploadFiles/GetFullPathResponse")]
        System.Threading.Tasks.Task<string> GetFullPathAsync(string sVirtualPath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDownloadUploadFiles/GetFileLenghtChecksumWithVirtual", ReplyAction="http://tempuri.org/IDownloadUploadFiles/GetFileLenghtChecksumWithVirtualResponse")]
        string GetFileLenghtChecksumWithVirtual(string sVirtualPath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDownloadUploadFiles/GetFileLenghtChecksumWithVirtual", ReplyAction="http://tempuri.org/IDownloadUploadFiles/GetFileLenghtChecksumWithVirtualResponse")]
        System.Threading.Tasks.Task<string> GetFileLenghtChecksumWithVirtualAsync(string sVirtualPath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDownloadUploadFiles/CreatePasswordProtScanDocumentWithVirtual" +
            "", ReplyAction="http://tempuri.org/IDownloadUploadFiles/CreatePasswordProtScanDocumentWithVirtual" +
            "Response")]
        bool CreatePasswordProtScanDocumentWithVirtual(string sVirtualPath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDownloadUploadFiles/CreatePasswordProtScanDocumentWithVirtual" +
            "", ReplyAction="http://tempuri.org/IDownloadUploadFiles/CreatePasswordProtScanDocumentWithVirtual" +
            "Response")]
        System.Threading.Tasks.Task<bool> CreatePasswordProtScanDocumentWithVirtualAsync(string sVirtualPath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDownloadUploadFiles/DownloadWithVirtualPath", ReplyAction="http://tempuri.org/IDownloadUploadFiles/DownloadWithVirtualPathResponse")]
        byte[] DownloadWithVirtualPath(string sVirtualPath, long lOffset, int iBufferSize);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDownloadUploadFiles/DownloadWithVirtualPath", ReplyAction="http://tempuri.org/IDownloadUploadFiles/DownloadWithVirtualPathResponse")]
        System.Threading.Tasks.Task<byte[]> DownloadWithVirtualPathAsync(string sVirtualPath, long lOffset, int iBufferSize);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDownloadUploadFiles/GetFileSizeWithVirtualPath", ReplyAction="http://tempuri.org/IDownloadUploadFiles/GetFileSizeWithVirtualPathResponse")]
        long GetFileSizeWithVirtualPath(string sVirtualPath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDownloadUploadFiles/GetFileSizeWithVirtualPath", ReplyAction="http://tempuri.org/IDownloadUploadFiles/GetFileSizeWithVirtualPathResponse")]
        System.Threading.Tasks.Task<long> GetFileSizeWithVirtualPathAsync(string sVirtualPath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDownloadUploadFiles/GetURIPathofVirtual", ReplyAction="http://tempuri.org/IDownloadUploadFiles/GetURIPathofVirtualResponse")]
        string GetURIPathofVirtual(string sVirtualPath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDownloadUploadFiles/GetURIPathofVirtual", ReplyAction="http://tempuri.org/IDownloadUploadFiles/GetURIPathofVirtualResponse")]
        System.Threading.Tasks.Task<string> GetURIPathofVirtualAsync(string sVirtualPath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDownloadUploadFiles/IsFileReadableWithVirtualPath", ReplyAction="http://tempuri.org/IDownloadUploadFiles/IsFileReadableWithVirtualPathResponse")]
        bool IsFileReadableWithVirtualPath(string sVirtualPath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDownloadUploadFiles/IsFileReadableWithVirtualPath", ReplyAction="http://tempuri.org/IDownloadUploadFiles/IsFileReadableWithVirtualPathResponse")]
        System.Threading.Tasks.Task<bool> IsFileReadableWithVirtualPathAsync(string sVirtualPath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDownloadUploadFiles/CopyExistingFileWithVirtualPaths", ReplyAction="http://tempuri.org/IDownloadUploadFiles/CopyExistingFileWithVirtualPathsResponse")]
        bool CopyExistingFileWithVirtualPaths(string sSourceVirtualPath, string sDestinationVirtualPath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDownloadUploadFiles/CopyExistingFileWithVirtualPaths", ReplyAction="http://tempuri.org/IDownloadUploadFiles/CopyExistingFileWithVirtualPathsResponse")]
        System.Threading.Tasks.Task<bool> CopyExistingFileWithVirtualPathsAsync(string sSourceVirtualPath, string sDestinationVirtualPath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDownloadUploadFiles/DeleteExistingFileWithVirtualPath", ReplyAction="http://tempuri.org/IDownloadUploadFiles/DeleteExistingFileWithVirtualPathResponse" +
            "")]
        bool DeleteExistingFileWithVirtualPath(string sSourceVirtualPath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDownloadUploadFiles/DeleteExistingFileWithVirtualPath", ReplyAction="http://tempuri.org/IDownloadUploadFiles/DeleteExistingFileWithVirtualPathResponse" +
            "")]
        System.Threading.Tasks.Task<bool> DeleteExistingFileWithVirtualPathAsync(string sSourceVirtualPath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDownloadUploadFiles/GetRDPRXMLInnerXmlDetails", ReplyAction="http://tempuri.org/IDownloadUploadFiles/GetRDPRXMLInnerXmlDetailsResponse")]
        string GetRDPRXMLInnerXmlDetails(string sVirtualPath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDownloadUploadFiles/GetRDPRXMLInnerXmlDetails", ReplyAction="http://tempuri.org/IDownloadUploadFiles/GetRDPRXMLInnerXmlDetailsResponse")]
        System.Threading.Tasks.Task<string> GetRDPRXMLInnerXmlDetailsAsync(string sVirtualPath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDownloadUploadFiles/UploadFirmSupportingDocumentWithVirtualPa" +
            "th", ReplyAction="http://tempuri.org/IDownloadUploadFiles/UploadFirmSupportingDocumentWithVirtualPa" +
            "thResponse")]
        ECDataAPI.FileDownloadUploadService.UploadFirmSupportingDocumentWithVirtualPathResponse UploadFirmSupportingDocumentWithVirtualPath(ECDataAPI.FileDownloadUploadService.UploadFirmSupportingDocumentWithVirtualPathRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDownloadUploadFiles/UploadFirmSupportingDocumentWithVirtualPa" +
            "th", ReplyAction="http://tempuri.org/IDownloadUploadFiles/UploadFirmSupportingDocumentWithVirtualPa" +
            "thResponse")]
        System.Threading.Tasks.Task<ECDataAPI.FileDownloadUploadService.UploadFirmSupportingDocumentWithVirtualPathResponse> UploadFirmSupportingDocumentWithVirtualPathAsync(ECDataAPI.FileDownloadUploadService.UploadFirmSupportingDocumentWithVirtualPathRequest request);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="UploadImageWithVirtualPaths", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class UploadImageWithVirtualPathsRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public byte[] bInputImageData;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public int imgWidth;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=2)]
        public int imgHeight;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=3)]
        public string sImagename;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=4)]
        public string sdirectoryStructure;
        
        public UploadImageWithVirtualPathsRequest() {
        }
        
        public UploadImageWithVirtualPathsRequest(byte[] bInputImageData, int imgWidth, int imgHeight, string sImagename, string sdirectoryStructure) {
            this.bInputImageData = bInputImageData;
            this.imgWidth = imgWidth;
            this.imgHeight = imgHeight;
            this.sImagename = sImagename;
            this.sdirectoryStructure = sdirectoryStructure;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="UploadImageWithVirtualPathsResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class UploadImageWithVirtualPathsResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string UploadImageWithVirtualPathsResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public string virtualFilePath;
        
        public UploadImageWithVirtualPathsResponse() {
        }
        
        public UploadImageWithVirtualPathsResponse(string UploadImageWithVirtualPathsResult, string virtualFilePath) {
            this.UploadImageWithVirtualPathsResult = UploadImageWithVirtualPathsResult;
            this.virtualFilePath = virtualFilePath;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="UploadWithVirtualPath", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class UploadWithVirtualPathRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public byte[] bInputDate;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public long lOffset;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=2)]
        public string sFileName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=3)]
        public string sdirectoryStructure;
        
        public UploadWithVirtualPathRequest() {
        }
        
        public UploadWithVirtualPathRequest(byte[] bInputDate, long lOffset, string sFileName, string sdirectoryStructure) {
            this.bInputDate = bInputDate;
            this.lOffset = lOffset;
            this.sFileName = sFileName;
            this.sdirectoryStructure = sdirectoryStructure;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="UploadWithVirtualPathResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class UploadWithVirtualPathResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string UploadWithVirtualPathResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public string virtualfilepath;
        
        public UploadWithVirtualPathResponse() {
        }
        
        public UploadWithVirtualPathResponse(string UploadWithVirtualPathResult, string virtualfilepath) {
            this.UploadWithVirtualPathResult = UploadWithVirtualPathResult;
            this.virtualfilepath = virtualfilepath;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="UploadFirmSupportingDocumentWithVirtualPath", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class UploadFirmSupportingDocumentWithVirtualPathRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string[] supportDocumentList;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public string[] supportingDocDescs;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=2)]
        public string sFileName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=3)]
        public string sdirectoryStructure;
        
        public UploadFirmSupportingDocumentWithVirtualPathRequest() {
        }
        
        public UploadFirmSupportingDocumentWithVirtualPathRequest(string[] supportDocumentList, string[] supportingDocDescs, string sFileName, string sdirectoryStructure) {
            this.supportDocumentList = supportDocumentList;
            this.supportingDocDescs = supportingDocDescs;
            this.sFileName = sFileName;
            this.sdirectoryStructure = sdirectoryStructure;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="UploadFirmSupportingDocumentWithVirtualPathResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class UploadFirmSupportingDocumentWithVirtualPathResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string UploadFirmSupportingDocumentWithVirtualPathResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public string virtualfilepath;
        
        public UploadFirmSupportingDocumentWithVirtualPathResponse() {
        }
        
        public UploadFirmSupportingDocumentWithVirtualPathResponse(string UploadFirmSupportingDocumentWithVirtualPathResult, string virtualfilepath) {
            this.UploadFirmSupportingDocumentWithVirtualPathResult = UploadFirmSupportingDocumentWithVirtualPathResult;
            this.virtualfilepath = virtualfilepath;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IDownloadUploadFilesChannel : ECDataAPI.FileDownloadUploadService.IDownloadUploadFiles, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DownloadUploadFilesClient : System.ServiceModel.ClientBase<ECDataAPI.FileDownloadUploadService.IDownloadUploadFiles>, ECDataAPI.FileDownloadUploadService.IDownloadUploadFiles {
        
        public DownloadUploadFilesClient() {
        }
        
        public DownloadUploadFilesClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public DownloadUploadFilesClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DownloadUploadFilesClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DownloadUploadFilesClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string UploadDocuments(byte[] bInputData, string sFileName, string sPath, string sDirName) {
            return base.Channel.UploadDocuments(bInputData, sFileName, sPath, sDirName);
        }
        
        public System.Threading.Tasks.Task<string> UploadDocumentsAsync(byte[] bInputData, string sFileName, string sPath, string sDirName) {
            return base.Channel.UploadDocumentsAsync(bInputData, sFileName, sPath, sDirName);
        }
        
        public string GetPdfFileLengthCount(string sFileName, string sPath, string sDirName) {
            return base.Channel.GetPdfFileLengthCount(sFileName, sPath, sDirName);
        }
        
        public System.Threading.Tasks.Task<string> GetPdfFileLengthCountAsync(string sFileName, string sPath, string sDirName) {
            return base.Channel.GetPdfFileLengthCountAsync(sFileName, sPath, sDirName);
        }
        
        public string GetSHA1HashData(string data) {
            return base.Channel.GetSHA1HashData(data);
        }
        
        public System.Threading.Tasks.Task<string> GetSHA1HashDataAsync(string data) {
            return base.Channel.GetSHA1HashDataAsync(data);
        }
        
        public bool ValidateSHA1HashData(string inputData, string storedHashData) {
            return base.Channel.ValidateSHA1HashData(inputData, storedHashData);
        }
        
        public System.Threading.Tasks.Task<bool> ValidateSHA1HashDataAsync(string inputData, string storedHashData) {
            return base.Channel.ValidateSHA1HashDataAsync(inputData, storedHashData);
        }
        
        public string Upload(byte[] bInputDate, long lOffset, string sFileName, string sdirectoryStructure) {
            return base.Channel.Upload(bInputDate, lOffset, sFileName, sdirectoryStructure);
        }
        
        public System.Threading.Tasks.Task<string> UploadAsync(byte[] bInputDate, long lOffset, string sFileName, string sdirectoryStructure) {
            return base.Channel.UploadAsync(bInputDate, lOffset, sFileName, sdirectoryStructure);
        }
        
        public byte[] Download(string sFilePath, long lOffset, int iBufferSize) {
            return base.Channel.Download(sFilePath, lOffset, iBufferSize);
        }
        
        public System.Threading.Tasks.Task<byte[]> DownloadAsync(string sFilePath, long lOffset, int iBufferSize) {
            return base.Channel.DownloadAsync(sFilePath, lOffset, iBufferSize);
        }
        
        public bool CreatePasswordProtedtedScannedDocument(string sFilePath) {
            return base.Channel.CreatePasswordProtedtedScannedDocument(sFilePath);
        }
        
        public System.Threading.Tasks.Task<bool> CreatePasswordProtedtedScannedDocumentAsync(string sFilePath) {
            return base.Channel.CreatePasswordProtedtedScannedDocumentAsync(sFilePath);
        }
        
        public long GetFileSize(string sFilePath) {
            return base.Channel.GetFileSize(sFilePath);
        }
        
        public System.Threading.Tasks.Task<long> GetFileSizeAsync(string sFilePath) {
            return base.Channel.GetFileSizeAsync(sFilePath);
        }
        
        public int PageCount(string sFilePath) {
            return base.Channel.PageCount(sFilePath);
        }
        
        public System.Threading.Tasks.Task<int> PageCountAsync(string sFilePath) {
            return base.Channel.PageCountAsync(sFilePath);
        }
        
        public string GetFileLenghtChecksum(string sFilePath) {
            return base.Channel.GetFileLenghtChecksum(sFilePath);
        }
        
        public System.Threading.Tasks.Task<string> GetFileLenghtChecksumAsync(string sFilePath) {
            return base.Channel.GetFileLenghtChecksumAsync(sFilePath);
        }
        
        public bool IsFileReadable(string sFileName) {
            return base.Channel.IsFileReadable(sFileName);
        }
        
        public System.Threading.Tasks.Task<bool> IsFileReadableAsync(string sFileName) {
            return base.Channel.IsFileReadableAsync(sFileName);
        }
        
        public string UploadImage(byte[] bInputImageData, int imgWidth, int imgHeight, string sImagename, string sdirectoryStructure) {
            return base.Channel.UploadImage(bInputImageData, imgWidth, imgHeight, sImagename, sdirectoryStructure);
        }
        
        public System.Threading.Tasks.Task<string> UploadImageAsync(byte[] bInputImageData, int imgWidth, int imgHeight, string sImagename, string sdirectoryStructure) {
            return base.Channel.UploadImageAsync(bInputImageData, imgWidth, imgHeight, sImagename, sdirectoryStructure);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        ECDataAPI.FileDownloadUploadService.UploadImageWithVirtualPathsResponse ECDataAPI.FileDownloadUploadService.IDownloadUploadFiles.UploadImageWithVirtualPaths(ECDataAPI.FileDownloadUploadService.UploadImageWithVirtualPathsRequest request) {
            return base.Channel.UploadImageWithVirtualPaths(request);
        }
        
        public string UploadImageWithVirtualPaths(byte[] bInputImageData, int imgWidth, int imgHeight, string sImagename, string sdirectoryStructure, out string virtualFilePath) {
            ECDataAPI.FileDownloadUploadService.UploadImageWithVirtualPathsRequest inValue = new ECDataAPI.FileDownloadUploadService.UploadImageWithVirtualPathsRequest();
            inValue.bInputImageData = bInputImageData;
            inValue.imgWidth = imgWidth;
            inValue.imgHeight = imgHeight;
            inValue.sImagename = sImagename;
            inValue.sdirectoryStructure = sdirectoryStructure;
            ECDataAPI.FileDownloadUploadService.UploadImageWithVirtualPathsResponse retVal = ((ECDataAPI.FileDownloadUploadService.IDownloadUploadFiles)(this)).UploadImageWithVirtualPaths(inValue);
            virtualFilePath = retVal.virtualFilePath;
            return retVal.UploadImageWithVirtualPathsResult;
        }
        
        public System.Threading.Tasks.Task<ECDataAPI.FileDownloadUploadService.UploadImageWithVirtualPathsResponse> UploadImageWithVirtualPathsAsync(ECDataAPI.FileDownloadUploadService.UploadImageWithVirtualPathsRequest request) {
            return base.Channel.UploadImageWithVirtualPathsAsync(request);
        }
        
        public bool CopyExistingFile(string sSourceFilePath, string sDestinationFilePath) {
            return base.Channel.CopyExistingFile(sSourceFilePath, sDestinationFilePath);
        }
        
        public System.Threading.Tasks.Task<bool> CopyExistingFileAsync(string sSourceFilePath, string sDestinationFilePath) {
            return base.Channel.CopyExistingFileAsync(sSourceFilePath, sDestinationFilePath);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        ECDataAPI.FileDownloadUploadService.UploadWithVirtualPathResponse ECDataAPI.FileDownloadUploadService.IDownloadUploadFiles.UploadWithVirtualPath(ECDataAPI.FileDownloadUploadService.UploadWithVirtualPathRequest request) {
            return base.Channel.UploadWithVirtualPath(request);
        }
        
        public string UploadWithVirtualPath(byte[] bInputDate, long lOffset, string sFileName, string sdirectoryStructure, out string virtualfilepath) {
            ECDataAPI.FileDownloadUploadService.UploadWithVirtualPathRequest inValue = new ECDataAPI.FileDownloadUploadService.UploadWithVirtualPathRequest();
            inValue.bInputDate = bInputDate;
            inValue.lOffset = lOffset;
            inValue.sFileName = sFileName;
            inValue.sdirectoryStructure = sdirectoryStructure;
            ECDataAPI.FileDownloadUploadService.UploadWithVirtualPathResponse retVal = ((ECDataAPI.FileDownloadUploadService.IDownloadUploadFiles)(this)).UploadWithVirtualPath(inValue);
            virtualfilepath = retVal.virtualfilepath;
            return retVal.UploadWithVirtualPathResult;
        }
        
        public System.Threading.Tasks.Task<ECDataAPI.FileDownloadUploadService.UploadWithVirtualPathResponse> UploadWithVirtualPathAsync(ECDataAPI.FileDownloadUploadService.UploadWithVirtualPathRequest request) {
            return base.Channel.UploadWithVirtualPathAsync(request);
        }
        
        public int PageCountWithVirtualPath(string sVirtualPath) {
            return base.Channel.PageCountWithVirtualPath(sVirtualPath);
        }
        
        public System.Threading.Tasks.Task<int> PageCountWithVirtualPathAsync(string sVirtualPath) {
            return base.Channel.PageCountWithVirtualPathAsync(sVirtualPath);
        }
        
        public string GetFullPath(string sVirtualPath) {
            return base.Channel.GetFullPath(sVirtualPath);
        }
        
        public System.Threading.Tasks.Task<string> GetFullPathAsync(string sVirtualPath) {
            return base.Channel.GetFullPathAsync(sVirtualPath);
        }
        
        public string GetFileLenghtChecksumWithVirtual(string sVirtualPath) {
            return base.Channel.GetFileLenghtChecksumWithVirtual(sVirtualPath);
        }
        
        public System.Threading.Tasks.Task<string> GetFileLenghtChecksumWithVirtualAsync(string sVirtualPath) {
            return base.Channel.GetFileLenghtChecksumWithVirtualAsync(sVirtualPath);
        }
        
        public bool CreatePasswordProtScanDocumentWithVirtual(string sVirtualPath) {
            return base.Channel.CreatePasswordProtScanDocumentWithVirtual(sVirtualPath);
        }
        
        public System.Threading.Tasks.Task<bool> CreatePasswordProtScanDocumentWithVirtualAsync(string sVirtualPath) {
            return base.Channel.CreatePasswordProtScanDocumentWithVirtualAsync(sVirtualPath);
        }
        
        public byte[] DownloadWithVirtualPath(string sVirtualPath, long lOffset, int iBufferSize) {
            return base.Channel.DownloadWithVirtualPath(sVirtualPath, lOffset, iBufferSize);
        }
        
        public System.Threading.Tasks.Task<byte[]> DownloadWithVirtualPathAsync(string sVirtualPath, long lOffset, int iBufferSize) {
            return base.Channel.DownloadWithVirtualPathAsync(sVirtualPath, lOffset, iBufferSize);
        }
        
        public long GetFileSizeWithVirtualPath(string sVirtualPath) {
            return base.Channel.GetFileSizeWithVirtualPath(sVirtualPath);
        }
        
        public System.Threading.Tasks.Task<long> GetFileSizeWithVirtualPathAsync(string sVirtualPath) {
            return base.Channel.GetFileSizeWithVirtualPathAsync(sVirtualPath);
        }
        
        public string GetURIPathofVirtual(string sVirtualPath) {
            return base.Channel.GetURIPathofVirtual(sVirtualPath);
        }
        
        public System.Threading.Tasks.Task<string> GetURIPathofVirtualAsync(string sVirtualPath) {
            return base.Channel.GetURIPathofVirtualAsync(sVirtualPath);
        }
        
        public bool IsFileReadableWithVirtualPath(string sVirtualPath) {
            return base.Channel.IsFileReadableWithVirtualPath(sVirtualPath);
        }
        
        public System.Threading.Tasks.Task<bool> IsFileReadableWithVirtualPathAsync(string sVirtualPath) {
            return base.Channel.IsFileReadableWithVirtualPathAsync(sVirtualPath);
        }
        
        public bool CopyExistingFileWithVirtualPaths(string sSourceVirtualPath, string sDestinationVirtualPath) {
            return base.Channel.CopyExistingFileWithVirtualPaths(sSourceVirtualPath, sDestinationVirtualPath);
        }
        
        public System.Threading.Tasks.Task<bool> CopyExistingFileWithVirtualPathsAsync(string sSourceVirtualPath, string sDestinationVirtualPath) {
            return base.Channel.CopyExistingFileWithVirtualPathsAsync(sSourceVirtualPath, sDestinationVirtualPath);
        }
        
        public bool DeleteExistingFileWithVirtualPath(string sSourceVirtualPath) {
            return base.Channel.DeleteExistingFileWithVirtualPath(sSourceVirtualPath);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteExistingFileWithVirtualPathAsync(string sSourceVirtualPath) {
            return base.Channel.DeleteExistingFileWithVirtualPathAsync(sSourceVirtualPath);
        }
        
        public string GetRDPRXMLInnerXmlDetails(string sVirtualPath) {
            return base.Channel.GetRDPRXMLInnerXmlDetails(sVirtualPath);
        }
        
        public System.Threading.Tasks.Task<string> GetRDPRXMLInnerXmlDetailsAsync(string sVirtualPath) {
            return base.Channel.GetRDPRXMLInnerXmlDetailsAsync(sVirtualPath);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        ECDataAPI.FileDownloadUploadService.UploadFirmSupportingDocumentWithVirtualPathResponse ECDataAPI.FileDownloadUploadService.IDownloadUploadFiles.UploadFirmSupportingDocumentWithVirtualPath(ECDataAPI.FileDownloadUploadService.UploadFirmSupportingDocumentWithVirtualPathRequest request) {
            return base.Channel.UploadFirmSupportingDocumentWithVirtualPath(request);
        }
        
        public string UploadFirmSupportingDocumentWithVirtualPath(string[] supportDocumentList, string[] supportingDocDescs, string sFileName, string sdirectoryStructure, out string virtualfilepath) {
            ECDataAPI.FileDownloadUploadService.UploadFirmSupportingDocumentWithVirtualPathRequest inValue = new ECDataAPI.FileDownloadUploadService.UploadFirmSupportingDocumentWithVirtualPathRequest();
            inValue.supportDocumentList = supportDocumentList;
            inValue.supportingDocDescs = supportingDocDescs;
            inValue.sFileName = sFileName;
            inValue.sdirectoryStructure = sdirectoryStructure;
            ECDataAPI.FileDownloadUploadService.UploadFirmSupportingDocumentWithVirtualPathResponse retVal = ((ECDataAPI.FileDownloadUploadService.IDownloadUploadFiles)(this)).UploadFirmSupportingDocumentWithVirtualPath(inValue);
            virtualfilepath = retVal.virtualfilepath;
            return retVal.UploadFirmSupportingDocumentWithVirtualPathResult;
        }
        
        public System.Threading.Tasks.Task<ECDataAPI.FileDownloadUploadService.UploadFirmSupportingDocumentWithVirtualPathResponse> UploadFirmSupportingDocumentWithVirtualPathAsync(ECDataAPI.FileDownloadUploadService.UploadFirmSupportingDocumentWithVirtualPathRequest request) {
            return base.Channel.UploadFirmSupportingDocumentWithVirtualPathAsync(request);
        }
    }
}
