//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ECDataUI.FileUploaderPhotoThumb {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="FileUploaderPhotoThumb.FileUploaderSoap")]
    public interface FileUploaderSoap {
        
        // CODEGEN: Generating message contract since element name filePath from namespace http://tempuri.org/ is not marked nillable
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/DownloadScannedFile", ReplyAction="*")]
        ECDataUI.FileUploaderPhotoThumb.DownloadScannedFileResponse DownloadScannedFile(ECDataUI.FileUploaderPhotoThumb.DownloadScannedFileRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/DownloadScannedFile", ReplyAction="*")]
        System.Threading.Tasks.Task<ECDataUI.FileUploaderPhotoThumb.DownloadScannedFileResponse> DownloadScannedFileAsync(ECDataUI.FileUploaderPhotoThumb.DownloadScannedFileRequest request);
        
        // CODEGEN: Generating message contract since element name buffer from namespace http://tempuri.org/ is not marked nillable
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/AppendChunkAll", ReplyAction="*")]
        ECDataUI.FileUploaderPhotoThumb.AppendChunkAllResponse AppendChunkAll(ECDataUI.FileUploaderPhotoThumb.AppendChunkAllRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/AppendChunkAll", ReplyAction="*")]
        System.Threading.Tasks.Task<ECDataUI.FileUploaderPhotoThumb.AppendChunkAllResponse> AppendChunkAllAsync(ECDataUI.FileUploaderPhotoThumb.AppendChunkAllRequest request);
        
        // CODEGEN: Generating message contract since element name GetChunkAllResult from namespace http://tempuri.org/ is not marked nillable
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetChunkAll", ReplyAction="*")]
        ECDataUI.FileUploaderPhotoThumb.GetChunkAllResponse GetChunkAll(ECDataUI.FileUploaderPhotoThumb.GetChunkAllRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetChunkAll", ReplyAction="*")]
        System.Threading.Tasks.Task<ECDataUI.FileUploaderPhotoThumb.GetChunkAllResponse> GetChunkAllAsync(ECDataUI.FileUploaderPhotoThumb.GetChunkAllRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetFileSizeAll", ReplyAction="*")]
        long GetFileSizeAll(long docID, int sroCode, int docType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetFileSizeAll", ReplyAction="*")]
        System.Threading.Tasks.Task<long> GetFileSizeAllAsync(long docID, int sroCode, int docType);
        
        // CODEGEN: Generating message contract since element name finalRegNumber from namespace http://tempuri.org/ is not marked nillable
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/updateServerLogAll", ReplyAction="*")]
        ECDataUI.FileUploaderPhotoThumb.updateServerLogAllResponse updateServerLogAll(ECDataUI.FileUploaderPhotoThumb.updateServerLogAllRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/updateServerLogAll", ReplyAction="*")]
        System.Threading.Tasks.Task<ECDataUI.FileUploaderPhotoThumb.updateServerLogAllResponse> updateServerLogAllAsync(ECDataUI.FileUploaderPhotoThumb.updateServerLogAllRequest request);
        
        // CODEGEN: Generating message contract since element name buffer from namespace http://tempuri.org/ is not marked nillable
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/AppendChunk", ReplyAction="*")]
        ECDataUI.FileUploaderPhotoThumb.AppendChunkResponse AppendChunk(ECDataUI.FileUploaderPhotoThumb.AppendChunkRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/AppendChunk", ReplyAction="*")]
        System.Threading.Tasks.Task<ECDataUI.FileUploaderPhotoThumb.AppendChunkResponse> AppendChunkAsync(ECDataUI.FileUploaderPhotoThumb.AppendChunkRequest request);
        
        // CODEGEN: Generating message contract since element name GetChunkResult from namespace http://tempuri.org/ is not marked nillable
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetChunk", ReplyAction="*")]
        ECDataUI.FileUploaderPhotoThumb.GetChunkResponse GetChunk(ECDataUI.FileUploaderPhotoThumb.GetChunkRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetChunk", ReplyAction="*")]
        System.Threading.Tasks.Task<ECDataUI.FileUploaderPhotoThumb.GetChunkResponse> GetChunkAsync(ECDataUI.FileUploaderPhotoThumb.GetChunkRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetFileSize", ReplyAction="*")]
        long GetFileSize(long docID, int sroCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetFileSize", ReplyAction="*")]
        System.Threading.Tasks.Task<long> GetFileSizeAsync(long docID, int sroCode);
        
        // CODEGEN: Generating message contract since element name finalRegNumber from namespace http://tempuri.org/ is not marked nillable
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/updateServerLog", ReplyAction="*")]
        ECDataUI.FileUploaderPhotoThumb.updateServerLogResponse updateServerLog(ECDataUI.FileUploaderPhotoThumb.updateServerLogRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/updateServerLog", ReplyAction="*")]
        System.Threading.Tasks.Task<ECDataUI.FileUploaderPhotoThumb.updateServerLogResponse> updateServerLogAsync(ECDataUI.FileUploaderPhotoThumb.updateServerLogRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IsValidUpload", ReplyAction="*")]
        ECDataUI.FileUploaderPhotoThumb.IsValidUploadResponse IsValidUpload(ECDataUI.FileUploaderPhotoThumb.IsValidUploadRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IsValidUpload", ReplyAction="*")]
        System.Threading.Tasks.Task<ECDataUI.FileUploaderPhotoThumb.IsValidUploadResponse> IsValidUploadAsync(ECDataUI.FileUploaderPhotoThumb.IsValidUploadRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/SupportAllUpload", ReplyAction="*")]
        ECDataUI.FileUploaderPhotoThumb.SupportAllUploadResponse SupportAllUpload(ECDataUI.FileUploaderPhotoThumb.SupportAllUploadRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/SupportAllUpload", ReplyAction="*")]
        System.Threading.Tasks.Task<ECDataUI.FileUploaderPhotoThumb.SupportAllUploadResponse> SupportAllUploadAsync(ECDataUI.FileUploaderPhotoThumb.SupportAllUploadRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IsFileExists", ReplyAction="*")]
        bool IsFileExists(long SroCode, long DocumentID, long SupportDocumentID, long PartyID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IsFileExists", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> IsFileExistsAsync(long SroCode, long DocumentID, long SupportDocumentID, long PartyID);
        
        // CODEGEN: Generating message contract since element name SupportAllDownloadResult from namespace http://tempuri.org/ is not marked nillable
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/SupportAllDownload", ReplyAction="*")]
        ECDataUI.FileUploaderPhotoThumb.SupportAllDownloadResponse SupportAllDownload(ECDataUI.FileUploaderPhotoThumb.SupportAllDownloadRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/SupportAllDownload", ReplyAction="*")]
        System.Threading.Tasks.Task<ECDataUI.FileUploaderPhotoThumb.SupportAllDownloadResponse> SupportAllDownloadAsync(ECDataUI.FileUploaderPhotoThumb.SupportAllDownloadRequest request);
        
        // CODEGEN: Generating message contract since element name physicalPath from namespace http://tempuri.org/ is not marked nillable
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/SaveUploadedFilePath", ReplyAction="*")]
        ECDataUI.FileUploaderPhotoThumb.SaveUploadedFilePathResponse SaveUploadedFilePath(ECDataUI.FileUploaderPhotoThumb.SaveUploadedFilePathRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/SaveUploadedFilePath", ReplyAction="*")]
        System.Threading.Tasks.Task<ECDataUI.FileUploaderPhotoThumb.SaveUploadedFilePathResponse> SaveUploadedFilePathAsync(ECDataUI.FileUploaderPhotoThumb.SaveUploadedFilePathRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetUploadedEnclosureCnt", ReplyAction="*")]
        int GetUploadedEnclosureCnt(long DocumentID, int SROCode, int SupportDocID, int EnclosureType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetUploadedEnclosureCnt", ReplyAction="*")]
        System.Threading.Tasks.Task<int> GetUploadedEnclosureCntAsync(long DocumentID, int SROCode, int SupportDocID, int EnclosureType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IsSpaceAvailableonDrive", ReplyAction="*")]
        ECDataUI.FileUploaderPhotoThumb.IsSpaceAvailableonDriveResponse IsSpaceAvailableonDrive(ECDataUI.FileUploaderPhotoThumb.IsSpaceAvailableonDriveRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IsSpaceAvailableonDrive", ReplyAction="*")]
        System.Threading.Tasks.Task<ECDataUI.FileUploaderPhotoThumb.IsSpaceAvailableonDriveResponse> IsSpaceAvailableonDriveAsync(ECDataUI.FileUploaderPhotoThumb.IsSpaceAvailableonDriveRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetEnclosureFileSize", ReplyAction="*")]
        long GetEnclosureFileSize(long SroCode, long DocumentID, long SupportDocumentID, long PartyID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetEnclosureFileSize", ReplyAction="*")]
        System.Threading.Tasks.Task<long> GetEnclosureFileSizeAsync(long SroCode, long DocumentID, long SupportDocumentID, long PartyID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IsFileExistAndNotRescanningEnabled", ReplyAction="*")]
        bool IsFileExistAndNotRescanningEnabled(long DocumentId, int DocumentTypeID, int SROCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IsFileExistAndNotRescanningEnabled", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> IsFileExistAndNotRescanningEnabledAsync(long DocumentId, int DocumentTypeID, int SROCode);
        
        // CODEGEN: Generating message contract since element name buffer from namespace http://tempuri.org/ is not marked nillable
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/AppendChunkAllFormIII", ReplyAction="*")]
        ECDataUI.FileUploaderPhotoThumb.AppendChunkAllFormIIIResponse AppendChunkAllFormIII(ECDataUI.FileUploaderPhotoThumb.AppendChunkAllFormIIIRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/AppendChunkAllFormIII", ReplyAction="*")]
        System.Threading.Tasks.Task<ECDataUI.FileUploaderPhotoThumb.AppendChunkAllFormIIIResponse> AppendChunkAllFormIIIAsync(ECDataUI.FileUploaderPhotoThumb.AppendChunkAllFormIIIRequest request);
        
        // CODEGEN: Generating message contract since element name finalRegNumber from namespace http://tempuri.org/ is not marked nillable
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/updateServerLogAllFormIII", ReplyAction="*")]
        ECDataUI.FileUploaderPhotoThumb.updateServerLogAllFormIIIResponse updateServerLogAllFormIII(ECDataUI.FileUploaderPhotoThumb.updateServerLogAllFormIIIRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/updateServerLogAllFormIII", ReplyAction="*")]
        System.Threading.Tasks.Task<ECDataUI.FileUploaderPhotoThumb.updateServerLogAllFormIIIResponse> updateServerLogAllFormIIIAsync(ECDataUI.FileUploaderPhotoThumb.updateServerLogAllFormIIIRequest request);
        
        // CODEGEN: Generating message contract since element name filePath from namespace http://tempuri.org/ is not marked nillable
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/DownloadScannedPhotoThumb", ReplyAction="*")]
        ECDataUI.FileUploaderPhotoThumb.DownloadScannedPhotoThumbResponse DownloadScannedPhotoThumb(ECDataUI.FileUploaderPhotoThumb.DownloadScannedPhotoThumbRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/DownloadScannedPhotoThumb", ReplyAction="*")]
        System.Threading.Tasks.Task<ECDataUI.FileUploaderPhotoThumb.DownloadScannedPhotoThumbResponse> DownloadScannedPhotoThumbAsync(ECDataUI.FileUploaderPhotoThumb.DownloadScannedPhotoThumbRequest request);
        
        // CODEGEN: Generating message contract since element name buffer from namespace http://tempuri.org/ is not marked nillable
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/PhotoThumbUpload", ReplyAction="*")]
        ECDataUI.FileUploaderPhotoThumb.PhotoThumbUploadResponse PhotoThumbUpload(ECDataUI.FileUploaderPhotoThumb.PhotoThumbUploadRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/PhotoThumbUpload", ReplyAction="*")]
        System.Threading.Tasks.Task<ECDataUI.FileUploaderPhotoThumb.PhotoThumbUploadResponse> PhotoThumbUploadAsync(ECDataUI.FileUploaderPhotoThumb.PhotoThumbUploadRequest request);
        
        // CODEGEN: Generating message contract since element name JSONObj from namespace http://tempuri.org/ is not marked nillable
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IsPhotoThumbAvailable", ReplyAction="*")]
        ECDataUI.FileUploaderPhotoThumb.IsPhotoThumbAvailableResponse IsPhotoThumbAvailable(ECDataUI.FileUploaderPhotoThumb.IsPhotoThumbAvailableRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IsPhotoThumbAvailable", ReplyAction="*")]
        System.Threading.Tasks.Task<ECDataUI.FileUploaderPhotoThumb.IsPhotoThumbAvailableResponse> IsPhotoThumbAvailableAsync(ECDataUI.FileUploaderPhotoThumb.IsPhotoThumbAvailableRequest request);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class DownloadScannedFileRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Name="DownloadScannedFile", Namespace="http://tempuri.org/", Order=0)]
        public ECDataUI.FileUploaderPhotoThumb.DownloadScannedFileRequestBody Body;
        
        public DownloadScannedFileRequest() {
        }
        
        public DownloadScannedFileRequest(ECDataUI.FileUploaderPhotoThumb.DownloadScannedFileRequestBody Body) {
            this.Body = Body;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="http://tempuri.org/")]
    public partial class DownloadScannedFileRequestBody {
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=0)]
        public string filePath;
        
        public DownloadScannedFileRequestBody() {
        }
        
        public DownloadScannedFileRequestBody(string filePath) {
            this.filePath = filePath;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class DownloadScannedFileResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Name="DownloadScannedFileResponse", Namespace="http://tempuri.org/", Order=0)]
        public ECDataUI.FileUploaderPhotoThumb.DownloadScannedFileResponseBody Body;
        
        public DownloadScannedFileResponse() {
        }
        
        public DownloadScannedFileResponse(ECDataUI.FileUploaderPhotoThumb.DownloadScannedFileResponseBody Body) {
            this.Body = Body;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="http://tempuri.org/")]
    public partial class DownloadScannedFileResponseBody {
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=0)]
        public byte[] DownloadScannedFileResult;
        
        public DownloadScannedFileResponseBody() {
        }
        
        public DownloadScannedFileResponseBody(byte[] DownloadScannedFileResult) {
            this.DownloadScannedFileResult = DownloadScannedFileResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class AppendChunkAllRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Name="AppendChunkAll", Namespace="http://tempuri.org/", Order=0)]
        public ECDataUI.FileUploaderPhotoThumb.AppendChunkAllRequestBody Body;
        
        public AppendChunkAllRequest() {
        }
        
        public AppendChunkAllRequest(ECDataUI.FileUploaderPhotoThumb.AppendChunkAllRequestBody Body) {
            this.Body = Body;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="http://tempuri.org/")]
    public partial class AppendChunkAllRequestBody {
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=0)]
        public byte[] buffer;
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=1)]
        public long offset;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=2)]
        public string finalRegNumber;
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=3)]
        public long fileSize;
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=4)]
        public int docType;
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=5)]
        public int sroCode;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=6)]
        public string VersionNumber;
        
        public AppendChunkAllRequestBody() {
        }
        
        public AppendChunkAllRequestBody(byte[] buffer, long offset, string finalRegNumber, long fileSize, int docType, int sroCode, string VersionNumber) {
            this.buffer = buffer;
            this.offset = offset;
            this.finalRegNumber = finalRegNumber;
            this.fileSize = fileSize;
            this.docType = docType;
            this.sroCode = sroCode;
            this.VersionNumber = VersionNumber;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class AppendChunkAllResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Name="AppendChunkAllResponse", Namespace="http://tempuri.org/", Order=0)]
        public ECDataUI.FileUploaderPhotoThumb.AppendChunkAllResponseBody Body;
        
        public AppendChunkAllResponse() {
        }
        
        public AppendChunkAllResponse(ECDataUI.FileUploaderPhotoThumb.AppendChunkAllResponseBody Body) {
            this.Body = Body;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.Runtime.Serialization.DataContractAttribute()]
    public partial class AppendChunkAllResponseBody {
        
        public AppendChunkAllResponseBody() {
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class GetChunkAllRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Name="GetChunkAll", Namespace="http://tempuri.org/", Order=0)]
        public ECDataUI.FileUploaderPhotoThumb.GetChunkAllRequestBody Body;
        
        public GetChunkAllRequest() {
        }
        
        public GetChunkAllRequest(ECDataUI.FileUploaderPhotoThumb.GetChunkAllRequestBody Body) {
            this.Body = Body;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="http://tempuri.org/")]
    public partial class GetChunkAllRequestBody {
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=0)]
        public long chunkID;
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=1)]
        public long docID;
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=2)]
        public int sroCode;
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=3)]
        public int docType;
        
        public GetChunkAllRequestBody() {
        }
        
        public GetChunkAllRequestBody(long chunkID, long docID, int sroCode, int docType) {
            this.chunkID = chunkID;
            this.docID = docID;
            this.sroCode = sroCode;
            this.docType = docType;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class GetChunkAllResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Name="GetChunkAllResponse", Namespace="http://tempuri.org/", Order=0)]
        public ECDataUI.FileUploaderPhotoThumb.GetChunkAllResponseBody Body;
        
        public GetChunkAllResponse() {
        }
        
        public GetChunkAllResponse(ECDataUI.FileUploaderPhotoThumb.GetChunkAllResponseBody Body) {
            this.Body = Body;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="http://tempuri.org/")]
    public partial class GetChunkAllResponseBody {
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=0)]
        public byte[] GetChunkAllResult;
        
        public GetChunkAllResponseBody() {
        }
        
        public GetChunkAllResponseBody(byte[] GetChunkAllResult) {
            this.GetChunkAllResult = GetChunkAllResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class updateServerLogAllRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Name="updateServerLogAll", Namespace="http://tempuri.org/", Order=0)]
        public ECDataUI.FileUploaderPhotoThumb.updateServerLogAllRequestBody Body;
        
        public updateServerLogAllRequest() {
        }
        
        public updateServerLogAllRequest(ECDataUI.FileUploaderPhotoThumb.updateServerLogAllRequestBody Body) {
            this.Body = Body;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="http://tempuri.org/")]
    public partial class updateServerLogAllRequestBody {
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=0)]
        public long docID;
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=1)]
        public int sroCode;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=2)]
        public string finalRegNumber;
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=3)]
        public int docType;
        
        public updateServerLogAllRequestBody() {
        }
        
        public updateServerLogAllRequestBody(long docID, int sroCode, string finalRegNumber, int docType) {
            this.docID = docID;
            this.sroCode = sroCode;
            this.finalRegNumber = finalRegNumber;
            this.docType = docType;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class updateServerLogAllResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Name="updateServerLogAllResponse", Namespace="http://tempuri.org/", Order=0)]
        public ECDataUI.FileUploaderPhotoThumb.updateServerLogAllResponseBody Body;
        
        public updateServerLogAllResponse() {
        }
        
        public updateServerLogAllResponse(ECDataUI.FileUploaderPhotoThumb.updateServerLogAllResponseBody Body) {
            this.Body = Body;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="http://tempuri.org/")]
    public partial class updateServerLogAllResponseBody {
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=0)]
        public bool updateServerLogAllResult;
        
        public updateServerLogAllResponseBody() {
        }
        
        public updateServerLogAllResponseBody(bool updateServerLogAllResult) {
            this.updateServerLogAllResult = updateServerLogAllResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class AppendChunkRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Name="AppendChunk", Namespace="http://tempuri.org/", Order=0)]
        public ECDataUI.FileUploaderPhotoThumb.AppendChunkRequestBody Body;
        
        public AppendChunkRequest() {
        }
        
        public AppendChunkRequest(ECDataUI.FileUploaderPhotoThumb.AppendChunkRequestBody Body) {
            this.Body = Body;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="http://tempuri.org/")]
    public partial class AppendChunkRequestBody {
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=0)]
        public byte[] buffer;
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=1)]
        public long Offset;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=2)]
        public string finalRegNumber;
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=3)]
        public long fileSize;
        
        public AppendChunkRequestBody() {
        }
        
        public AppendChunkRequestBody(byte[] buffer, long Offset, string finalRegNumber, long fileSize) {
            this.buffer = buffer;
            this.Offset = Offset;
            this.finalRegNumber = finalRegNumber;
            this.fileSize = fileSize;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class AppendChunkResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Name="AppendChunkResponse", Namespace="http://tempuri.org/", Order=0)]
        public ECDataUI.FileUploaderPhotoThumb.AppendChunkResponseBody Body;
        
        public AppendChunkResponse() {
        }
        
        public AppendChunkResponse(ECDataUI.FileUploaderPhotoThumb.AppendChunkResponseBody Body) {
            this.Body = Body;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.Runtime.Serialization.DataContractAttribute()]
    public partial class AppendChunkResponseBody {
        
        public AppendChunkResponseBody() {
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class GetChunkRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Name="GetChunk", Namespace="http://tempuri.org/", Order=0)]
        public ECDataUI.FileUploaderPhotoThumb.GetChunkRequestBody Body;
        
        public GetChunkRequest() {
        }
        
        public GetChunkRequest(ECDataUI.FileUploaderPhotoThumb.GetChunkRequestBody Body) {
            this.Body = Body;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="http://tempuri.org/")]
    public partial class GetChunkRequestBody {
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=0)]
        public long chunkID;
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=1)]
        public long DocID;
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=2)]
        public int SroCode;
        
        public GetChunkRequestBody() {
        }
        
        public GetChunkRequestBody(long chunkID, long DocID, int SroCode) {
            this.chunkID = chunkID;
            this.DocID = DocID;
            this.SroCode = SroCode;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class GetChunkResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Name="GetChunkResponse", Namespace="http://tempuri.org/", Order=0)]
        public ECDataUI.FileUploaderPhotoThumb.GetChunkResponseBody Body;
        
        public GetChunkResponse() {
        }
        
        public GetChunkResponse(ECDataUI.FileUploaderPhotoThumb.GetChunkResponseBody Body) {
            this.Body = Body;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="http://tempuri.org/")]
    public partial class GetChunkResponseBody {
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=0)]
        public byte[] GetChunkResult;
        
        public GetChunkResponseBody() {
        }
        
        public GetChunkResponseBody(byte[] GetChunkResult) {
            this.GetChunkResult = GetChunkResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class updateServerLogRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Name="updateServerLog", Namespace="http://tempuri.org/", Order=0)]
        public ECDataUI.FileUploaderPhotoThumb.updateServerLogRequestBody Body;
        
        public updateServerLogRequest() {
        }
        
        public updateServerLogRequest(ECDataUI.FileUploaderPhotoThumb.updateServerLogRequestBody Body) {
            this.Body = Body;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="http://tempuri.org/")]
    public partial class updateServerLogRequestBody {
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=0)]
        public long docID;
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=1)]
        public int sroCode;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=2)]
        public string finalRegNumber;
        
        public updateServerLogRequestBody() {
        }
        
        public updateServerLogRequestBody(long docID, int sroCode, string finalRegNumber) {
            this.docID = docID;
            this.sroCode = sroCode;
            this.finalRegNumber = finalRegNumber;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class updateServerLogResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Name="updateServerLogResponse", Namespace="http://tempuri.org/", Order=0)]
        public ECDataUI.FileUploaderPhotoThumb.updateServerLogResponseBody Body;
        
        public updateServerLogResponse() {
        }
        
        public updateServerLogResponse(ECDataUI.FileUploaderPhotoThumb.updateServerLogResponseBody Body) {
            this.Body = Body;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="http://tempuri.org/")]
    public partial class updateServerLogResponseBody {
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=0)]
        public bool updateServerLogResult;
        
        public updateServerLogResponseBody() {
        }
        
        public updateServerLogResponseBody(bool updateServerLogResult) {
            this.updateServerLogResult = updateServerLogResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class IsValidUploadRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Name="IsValidUpload", Namespace="http://tempuri.org/", Order=0)]
        public ECDataUI.FileUploaderPhotoThumb.IsValidUploadRequestBody Body;
        
        public IsValidUploadRequest() {
        }
        
        public IsValidUploadRequest(ECDataUI.FileUploaderPhotoThumb.IsValidUploadRequestBody Body) {
            this.Body = Body;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="http://tempuri.org/")]
    public partial class IsValidUploadRequestBody {
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=0)]
        public long Documentid;
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=1)]
        public int SROCode;
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=2)]
        public int DocumentTypeId;
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=3)]
        public char RescanModuleType;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=4)]
        public string finalRegNumber;
        
        public IsValidUploadRequestBody() {
        }
        
        public IsValidUploadRequestBody(long Documentid, int SROCode, int DocumentTypeId, char RescanModuleType, string finalRegNumber) {
            this.Documentid = Documentid;
            this.SROCode = SROCode;
            this.DocumentTypeId = DocumentTypeId;
            this.RescanModuleType = RescanModuleType;
            this.finalRegNumber = finalRegNumber;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class IsValidUploadResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Name="IsValidUploadResponse", Namespace="http://tempuri.org/", Order=0)]
        public ECDataUI.FileUploaderPhotoThumb.IsValidUploadResponseBody Body;
        
        public IsValidUploadResponse() {
        }
        
        public IsValidUploadResponse(ECDataUI.FileUploaderPhotoThumb.IsValidUploadResponseBody Body) {
            this.Body = Body;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="http://tempuri.org/")]
    public partial class IsValidUploadResponseBody {
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=0)]
        public bool IsValidUploadResult;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=1)]
        public string errorMessage;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=2)]
        public string RC;
        
        public IsValidUploadResponseBody() {
        }
        
        public IsValidUploadResponseBody(bool IsValidUploadResult, string errorMessage, string RC) {
            this.IsValidUploadResult = IsValidUploadResult;
            this.errorMessage = errorMessage;
            this.RC = RC;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class SupportAllUploadRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Name="SupportAllUpload", Namespace="http://tempuri.org/", Order=0)]
        public ECDataUI.FileUploaderPhotoThumb.SupportAllUploadRequestBody Body;
        
        public SupportAllUploadRequest() {
        }
        
        public SupportAllUploadRequest(ECDataUI.FileUploaderPhotoThumb.SupportAllUploadRequestBody Body) {
            this.Body = Body;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="http://tempuri.org/")]
    public partial class SupportAllUploadRequestBody {
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=0)]
        public byte[] buffer;
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=1)]
        public long offset;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=2)]
        public string fileName;
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=3)]
        public long fileSize;
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=4)]
        public long DocumentID;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=5)]
        public string SroTriletter;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=6)]
        public string EnclosureType;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=7)]
        public string FinalPath;
        
        public SupportAllUploadRequestBody() {
        }
        
        public SupportAllUploadRequestBody(byte[] buffer, long offset, string fileName, long fileSize, long DocumentID, string SroTriletter, string EnclosureType, string FinalPath) {
            this.buffer = buffer;
            this.offset = offset;
            this.fileName = fileName;
            this.fileSize = fileSize;
            this.DocumentID = DocumentID;
            this.SroTriletter = SroTriletter;
            this.EnclosureType = EnclosureType;
            this.FinalPath = FinalPath;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class SupportAllUploadResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Name="SupportAllUploadResponse", Namespace="http://tempuri.org/", Order=0)]
        public ECDataUI.FileUploaderPhotoThumb.SupportAllUploadResponseBody Body;
        
        public SupportAllUploadResponse() {
        }
        
        public SupportAllUploadResponse(ECDataUI.FileUploaderPhotoThumb.SupportAllUploadResponseBody Body) {
            this.Body = Body;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="http://tempuri.org/")]
    public partial class SupportAllUploadResponseBody {
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=0)]
        public string FinalPath;
        
        public SupportAllUploadResponseBody() {
        }
        
        public SupportAllUploadResponseBody(string FinalPath) {
            this.FinalPath = FinalPath;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class SupportAllDownloadRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Name="SupportAllDownload", Namespace="http://tempuri.org/", Order=0)]
        public ECDataUI.FileUploaderPhotoThumb.SupportAllDownloadRequestBody Body;
        
        public SupportAllDownloadRequest() {
        }
        
        public SupportAllDownloadRequest(ECDataUI.FileUploaderPhotoThumb.SupportAllDownloadRequestBody Body) {
            this.Body = Body;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="http://tempuri.org/")]
    public partial class SupportAllDownloadRequestBody {
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=0)]
        public long DocID;
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=1)]
        public long SupportDocID;
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=2)]
        public int SROCode;
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=3)]
        public long PartyID;
        
        public SupportAllDownloadRequestBody() {
        }
        
        public SupportAllDownloadRequestBody(long DocID, long SupportDocID, int SROCode, long PartyID) {
            this.DocID = DocID;
            this.SupportDocID = SupportDocID;
            this.SROCode = SROCode;
            this.PartyID = PartyID;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class SupportAllDownloadResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Name="SupportAllDownloadResponse", Namespace="http://tempuri.org/", Order=0)]
        public ECDataUI.FileUploaderPhotoThumb.SupportAllDownloadResponseBody Body;
        
        public SupportAllDownloadResponse() {
        }
        
        public SupportAllDownloadResponse(ECDataUI.FileUploaderPhotoThumb.SupportAllDownloadResponseBody Body) {
            this.Body = Body;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="http://tempuri.org/")]
    public partial class SupportAllDownloadResponseBody {
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=0)]
        public byte[] SupportAllDownloadResult;
        
        public SupportAllDownloadResponseBody() {
        }
        
        public SupportAllDownloadResponseBody(byte[] SupportAllDownloadResult) {
            this.SupportAllDownloadResult = SupportAllDownloadResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class SaveUploadedFilePathRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Name="SaveUploadedFilePath", Namespace="http://tempuri.org/", Order=0)]
        public ECDataUI.FileUploaderPhotoThumb.SaveUploadedFilePathRequestBody Body;
        
        public SaveUploadedFilePathRequest() {
        }
        
        public SaveUploadedFilePathRequest(ECDataUI.FileUploaderPhotoThumb.SaveUploadedFilePathRequestBody Body) {
            this.Body = Body;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="http://tempuri.org/")]
    public partial class SaveUploadedFilePathRequestBody {
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=0)]
        public long DocID;
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=1)]
        public long SroCode;
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=2)]
        public int SupportDocID;
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=3)]
        public System.DateTime UpdateDateTime;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=4)]
        public string physicalPath;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=5)]
        public string VirtualPath;
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=6)]
        public long PartyID;
        
        public SaveUploadedFilePathRequestBody() {
        }
        
        public SaveUploadedFilePathRequestBody(long DocID, long SroCode, int SupportDocID, System.DateTime UpdateDateTime, string physicalPath, string VirtualPath, long PartyID) {
            this.DocID = DocID;
            this.SroCode = SroCode;
            this.SupportDocID = SupportDocID;
            this.UpdateDateTime = UpdateDateTime;
            this.physicalPath = physicalPath;
            this.VirtualPath = VirtualPath;
            this.PartyID = PartyID;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class SaveUploadedFilePathResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Name="SaveUploadedFilePathResponse", Namespace="http://tempuri.org/", Order=0)]
        public ECDataUI.FileUploaderPhotoThumb.SaveUploadedFilePathResponseBody Body;
        
        public SaveUploadedFilePathResponse() {
        }
        
        public SaveUploadedFilePathResponse(ECDataUI.FileUploaderPhotoThumb.SaveUploadedFilePathResponseBody Body) {
            this.Body = Body;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="http://tempuri.org/")]
    public partial class SaveUploadedFilePathResponseBody {
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=0)]
        public bool SaveUploadedFilePathResult;
        
        public SaveUploadedFilePathResponseBody() {
        }
        
        public SaveUploadedFilePathResponseBody(bool SaveUploadedFilePathResult) {
            this.SaveUploadedFilePathResult = SaveUploadedFilePathResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class IsSpaceAvailableonDriveRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Name="IsSpaceAvailableonDrive", Namespace="http://tempuri.org/", Order=0)]
        public ECDataUI.FileUploaderPhotoThumb.IsSpaceAvailableonDriveRequestBody Body;
        
        public IsSpaceAvailableonDriveRequest() {
        }
        
        public IsSpaceAvailableonDriveRequest(ECDataUI.FileUploaderPhotoThumb.IsSpaceAvailableonDriveRequestBody Body) {
            this.Body = Body;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="http://tempuri.org/")]
    public partial class IsSpaceAvailableonDriveRequestBody {
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=0)]
        public long FileSize;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=1)]
        public string errorMessage;
        
        public IsSpaceAvailableonDriveRequestBody() {
        }
        
        public IsSpaceAvailableonDriveRequestBody(long FileSize, string errorMessage) {
            this.FileSize = FileSize;
            this.errorMessage = errorMessage;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class IsSpaceAvailableonDriveResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Name="IsSpaceAvailableonDriveResponse", Namespace="http://tempuri.org/", Order=0)]
        public ECDataUI.FileUploaderPhotoThumb.IsSpaceAvailableonDriveResponseBody Body;
        
        public IsSpaceAvailableonDriveResponse() {
        }
        
        public IsSpaceAvailableonDriveResponse(ECDataUI.FileUploaderPhotoThumb.IsSpaceAvailableonDriveResponseBody Body) {
            this.Body = Body;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="http://tempuri.org/")]
    public partial class IsSpaceAvailableonDriveResponseBody {
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=0)]
        public bool IsSpaceAvailableonDriveResult;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=1)]
        public string errorMessage;
        
        public IsSpaceAvailableonDriveResponseBody() {
        }
        
        public IsSpaceAvailableonDriveResponseBody(bool IsSpaceAvailableonDriveResult, string errorMessage) {
            this.IsSpaceAvailableonDriveResult = IsSpaceAvailableonDriveResult;
            this.errorMessage = errorMessage;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class AppendChunkAllFormIIIRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Name="AppendChunkAllFormIII", Namespace="http://tempuri.org/", Order=0)]
        public ECDataUI.FileUploaderPhotoThumb.AppendChunkAllFormIIIRequestBody Body;
        
        public AppendChunkAllFormIIIRequest() {
        }
        
        public AppendChunkAllFormIIIRequest(ECDataUI.FileUploaderPhotoThumb.AppendChunkAllFormIIIRequestBody Body) {
            this.Body = Body;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="http://tempuri.org/")]
    public partial class AppendChunkAllFormIIIRequestBody {
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=0)]
        public byte[] buffer;
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=1)]
        public long offset;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=2)]
        public string finalRegNumber;
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=3)]
        public long fileSize;
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=4)]
        public int docType;
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=5)]
        public int sroCode;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=6)]
        public string VersionNumber;
        
        public AppendChunkAllFormIIIRequestBody() {
        }
        
        public AppendChunkAllFormIIIRequestBody(byte[] buffer, long offset, string finalRegNumber, long fileSize, int docType, int sroCode, string VersionNumber) {
            this.buffer = buffer;
            this.offset = offset;
            this.finalRegNumber = finalRegNumber;
            this.fileSize = fileSize;
            this.docType = docType;
            this.sroCode = sroCode;
            this.VersionNumber = VersionNumber;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class AppendChunkAllFormIIIResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Name="AppendChunkAllFormIIIResponse", Namespace="http://tempuri.org/", Order=0)]
        public ECDataUI.FileUploaderPhotoThumb.AppendChunkAllFormIIIResponseBody Body;
        
        public AppendChunkAllFormIIIResponse() {
        }
        
        public AppendChunkAllFormIIIResponse(ECDataUI.FileUploaderPhotoThumb.AppendChunkAllFormIIIResponseBody Body) {
            this.Body = Body;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.Runtime.Serialization.DataContractAttribute()]
    public partial class AppendChunkAllFormIIIResponseBody {
        
        public AppendChunkAllFormIIIResponseBody() {
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class updateServerLogAllFormIIIRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Name="updateServerLogAllFormIII", Namespace="http://tempuri.org/", Order=0)]
        public ECDataUI.FileUploaderPhotoThumb.updateServerLogAllFormIIIRequestBody Body;
        
        public updateServerLogAllFormIIIRequest() {
        }
        
        public updateServerLogAllFormIIIRequest(ECDataUI.FileUploaderPhotoThumb.updateServerLogAllFormIIIRequestBody Body) {
            this.Body = Body;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="http://tempuri.org/")]
    public partial class updateServerLogAllFormIIIRequestBody {
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=0)]
        public long docID;
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=1)]
        public int sroCode;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=2)]
        public string finalRegNumber;
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=3)]
        public int docType;
        
        public updateServerLogAllFormIIIRequestBody() {
        }
        
        public updateServerLogAllFormIIIRequestBody(long docID, int sroCode, string finalRegNumber, int docType) {
            this.docID = docID;
            this.sroCode = sroCode;
            this.finalRegNumber = finalRegNumber;
            this.docType = docType;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class updateServerLogAllFormIIIResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Name="updateServerLogAllFormIIIResponse", Namespace="http://tempuri.org/", Order=0)]
        public ECDataUI.FileUploaderPhotoThumb.updateServerLogAllFormIIIResponseBody Body;
        
        public updateServerLogAllFormIIIResponse() {
        }
        
        public updateServerLogAllFormIIIResponse(ECDataUI.FileUploaderPhotoThumb.updateServerLogAllFormIIIResponseBody Body) {
            this.Body = Body;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="http://tempuri.org/")]
    public partial class updateServerLogAllFormIIIResponseBody {
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=0)]
        public bool updateServerLogAllFormIIIResult;
        
        public updateServerLogAllFormIIIResponseBody() {
        }
        
        public updateServerLogAllFormIIIResponseBody(bool updateServerLogAllFormIIIResult) {
            this.updateServerLogAllFormIIIResult = updateServerLogAllFormIIIResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class DownloadScannedPhotoThumbRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Name="DownloadScannedPhotoThumb", Namespace="http://tempuri.org/", Order=0)]
        public ECDataUI.FileUploaderPhotoThumb.DownloadScannedPhotoThumbRequestBody Body;
        
        public DownloadScannedPhotoThumbRequest() {
        }
        
        public DownloadScannedPhotoThumbRequest(ECDataUI.FileUploaderPhotoThumb.DownloadScannedPhotoThumbRequestBody Body) {
            this.Body = Body;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="http://tempuri.org/")]
    public partial class DownloadScannedPhotoThumbRequestBody {
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=0)]
        public string filePath;
        
        public DownloadScannedPhotoThumbRequestBody() {
        }
        
        public DownloadScannedPhotoThumbRequestBody(string filePath) {
            this.filePath = filePath;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class DownloadScannedPhotoThumbResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Name="DownloadScannedPhotoThumbResponse", Namespace="http://tempuri.org/", Order=0)]
        public ECDataUI.FileUploaderPhotoThumb.DownloadScannedPhotoThumbResponseBody Body;
        
        public DownloadScannedPhotoThumbResponse() {
        }
        
        public DownloadScannedPhotoThumbResponse(ECDataUI.FileUploaderPhotoThumb.DownloadScannedPhotoThumbResponseBody Body) {
            this.Body = Body;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="http://tempuri.org/")]
    public partial class DownloadScannedPhotoThumbResponseBody {
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=0)]
        public byte[] DownloadScannedPhotoThumbResult;
        
        public DownloadScannedPhotoThumbResponseBody() {
        }
        
        public DownloadScannedPhotoThumbResponseBody(byte[] DownloadScannedPhotoThumbResult) {
            this.DownloadScannedPhotoThumbResult = DownloadScannedPhotoThumbResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class PhotoThumbUploadRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Name="PhotoThumbUpload", Namespace="http://tempuri.org/", Order=0)]
        public ECDataUI.FileUploaderPhotoThumb.PhotoThumbUploadRequestBody Body;
        
        public PhotoThumbUploadRequest() {
        }
        
        public PhotoThumbUploadRequest(ECDataUI.FileUploaderPhotoThumb.PhotoThumbUploadRequestBody Body) {
            this.Body = Body;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="http://tempuri.org/")]
    public partial class PhotoThumbUploadRequestBody {
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=0)]
        public byte[] buffer;
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=1)]
        public int sroCode;
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=2)]
        public long partyid;
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=3)]
        public bool IsPhoto;
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=4)]
        public bool IsThumb;
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=5)]
        public long DocumentID;
        
        public PhotoThumbUploadRequestBody() {
        }
        
        public PhotoThumbUploadRequestBody(byte[] buffer, int sroCode, long partyid, bool IsPhoto, bool IsThumb, long DocumentID) {
            this.buffer = buffer;
            this.sroCode = sroCode;
            this.partyid = partyid;
            this.IsPhoto = IsPhoto;
            this.IsThumb = IsThumb;
            this.DocumentID = DocumentID;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class PhotoThumbUploadResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Name="PhotoThumbUploadResponse", Namespace="http://tempuri.org/", Order=0)]
        public ECDataUI.FileUploaderPhotoThumb.PhotoThumbUploadResponseBody Body;
        
        public PhotoThumbUploadResponse() {
        }
        
        public PhotoThumbUploadResponse(ECDataUI.FileUploaderPhotoThumb.PhotoThumbUploadResponseBody Body) {
            this.Body = Body;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="http://tempuri.org/")]
    public partial class PhotoThumbUploadResponseBody {
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=0)]
        public bool PhotoThumbUploadResult;
        
        public PhotoThumbUploadResponseBody() {
        }
        
        public PhotoThumbUploadResponseBody(bool PhotoThumbUploadResult) {
            this.PhotoThumbUploadResult = PhotoThumbUploadResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class IsPhotoThumbAvailableRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Name="IsPhotoThumbAvailable", Namespace="http://tempuri.org/", Order=0)]
        public ECDataUI.FileUploaderPhotoThumb.IsPhotoThumbAvailableRequestBody Body;
        
        public IsPhotoThumbAvailableRequest() {
        }
        
        public IsPhotoThumbAvailableRequest(ECDataUI.FileUploaderPhotoThumb.IsPhotoThumbAvailableRequestBody Body) {
            this.Body = Body;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="http://tempuri.org/")]
    public partial class IsPhotoThumbAvailableRequestBody {
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=0)]
        public string JSONObj;
        
        public IsPhotoThumbAvailableRequestBody() {
        }
        
        public IsPhotoThumbAvailableRequestBody(string JSONObj) {
            this.JSONObj = JSONObj;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class IsPhotoThumbAvailableResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Name="IsPhotoThumbAvailableResponse", Namespace="http://tempuri.org/", Order=0)]
        public ECDataUI.FileUploaderPhotoThumb.IsPhotoThumbAvailableResponseBody Body;
        
        public IsPhotoThumbAvailableResponse() {
        }
        
        public IsPhotoThumbAvailableResponse(ECDataUI.FileUploaderPhotoThumb.IsPhotoThumbAvailableResponseBody Body) {
            this.Body = Body;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="http://tempuri.org/")]
    public partial class IsPhotoThumbAvailableResponseBody {
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=0)]
        public string IsPhotoThumbAvailableResult;
        
        public IsPhotoThumbAvailableResponseBody() {
        }
        
        public IsPhotoThumbAvailableResponseBody(string IsPhotoThumbAvailableResult) {
            this.IsPhotoThumbAvailableResult = IsPhotoThumbAvailableResult;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface FileUploaderSoapChannel : ECDataUI.FileUploaderPhotoThumb.FileUploaderSoap, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FileUploaderSoapClient : System.ServiceModel.ClientBase<ECDataUI.FileUploaderPhotoThumb.FileUploaderSoap>, ECDataUI.FileUploaderPhotoThumb.FileUploaderSoap {
        
        public FileUploaderSoapClient() {
        }
        
        public FileUploaderSoapClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public FileUploaderSoapClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FileUploaderSoapClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FileUploaderSoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        ECDataUI.FileUploaderPhotoThumb.DownloadScannedFileResponse ECDataUI.FileUploaderPhotoThumb.FileUploaderSoap.DownloadScannedFile(ECDataUI.FileUploaderPhotoThumb.DownloadScannedFileRequest request) {
            return base.Channel.DownloadScannedFile(request);
        }
        
        public byte[] DownloadScannedFile(string filePath) {
            ECDataUI.FileUploaderPhotoThumb.DownloadScannedFileRequest inValue = new ECDataUI.FileUploaderPhotoThumb.DownloadScannedFileRequest();
            inValue.Body = new ECDataUI.FileUploaderPhotoThumb.DownloadScannedFileRequestBody();
            inValue.Body.filePath = filePath;
            ECDataUI.FileUploaderPhotoThumb.DownloadScannedFileResponse retVal = ((ECDataUI.FileUploaderPhotoThumb.FileUploaderSoap)(this)).DownloadScannedFile(inValue);
            return retVal.Body.DownloadScannedFileResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<ECDataUI.FileUploaderPhotoThumb.DownloadScannedFileResponse> ECDataUI.FileUploaderPhotoThumb.FileUploaderSoap.DownloadScannedFileAsync(ECDataUI.FileUploaderPhotoThumb.DownloadScannedFileRequest request) {
            return base.Channel.DownloadScannedFileAsync(request);
        }
        
        public System.Threading.Tasks.Task<ECDataUI.FileUploaderPhotoThumb.DownloadScannedFileResponse> DownloadScannedFileAsync(string filePath) {
            ECDataUI.FileUploaderPhotoThumb.DownloadScannedFileRequest inValue = new ECDataUI.FileUploaderPhotoThumb.DownloadScannedFileRequest();
            inValue.Body = new ECDataUI.FileUploaderPhotoThumb.DownloadScannedFileRequestBody();
            inValue.Body.filePath = filePath;
            return ((ECDataUI.FileUploaderPhotoThumb.FileUploaderSoap)(this)).DownloadScannedFileAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        ECDataUI.FileUploaderPhotoThumb.AppendChunkAllResponse ECDataUI.FileUploaderPhotoThumb.FileUploaderSoap.AppendChunkAll(ECDataUI.FileUploaderPhotoThumb.AppendChunkAllRequest request) {
            return base.Channel.AppendChunkAll(request);
        }
        
        public void AppendChunkAll(byte[] buffer, long offset, string finalRegNumber, long fileSize, int docType, int sroCode, string VersionNumber) {
            ECDataUI.FileUploaderPhotoThumb.AppendChunkAllRequest inValue = new ECDataUI.FileUploaderPhotoThumb.AppendChunkAllRequest();
            inValue.Body = new ECDataUI.FileUploaderPhotoThumb.AppendChunkAllRequestBody();
            inValue.Body.buffer = buffer;
            inValue.Body.offset = offset;
            inValue.Body.finalRegNumber = finalRegNumber;
            inValue.Body.fileSize = fileSize;
            inValue.Body.docType = docType;
            inValue.Body.sroCode = sroCode;
            inValue.Body.VersionNumber = VersionNumber;
            ECDataUI.FileUploaderPhotoThumb.AppendChunkAllResponse retVal = ((ECDataUI.FileUploaderPhotoThumb.FileUploaderSoap)(this)).AppendChunkAll(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<ECDataUI.FileUploaderPhotoThumb.AppendChunkAllResponse> ECDataUI.FileUploaderPhotoThumb.FileUploaderSoap.AppendChunkAllAsync(ECDataUI.FileUploaderPhotoThumb.AppendChunkAllRequest request) {
            return base.Channel.AppendChunkAllAsync(request);
        }
        
        public System.Threading.Tasks.Task<ECDataUI.FileUploaderPhotoThumb.AppendChunkAllResponse> AppendChunkAllAsync(byte[] buffer, long offset, string finalRegNumber, long fileSize, int docType, int sroCode, string VersionNumber) {
            ECDataUI.FileUploaderPhotoThumb.AppendChunkAllRequest inValue = new ECDataUI.FileUploaderPhotoThumb.AppendChunkAllRequest();
            inValue.Body = new ECDataUI.FileUploaderPhotoThumb.AppendChunkAllRequestBody();
            inValue.Body.buffer = buffer;
            inValue.Body.offset = offset;
            inValue.Body.finalRegNumber = finalRegNumber;
            inValue.Body.fileSize = fileSize;
            inValue.Body.docType = docType;
            inValue.Body.sroCode = sroCode;
            inValue.Body.VersionNumber = VersionNumber;
            return ((ECDataUI.FileUploaderPhotoThumb.FileUploaderSoap)(this)).AppendChunkAllAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        ECDataUI.FileUploaderPhotoThumb.GetChunkAllResponse ECDataUI.FileUploaderPhotoThumb.FileUploaderSoap.GetChunkAll(ECDataUI.FileUploaderPhotoThumb.GetChunkAllRequest request) {
            return base.Channel.GetChunkAll(request);
        }
        
        public byte[] GetChunkAll(long chunkID, long docID, int sroCode, int docType) {
            ECDataUI.FileUploaderPhotoThumb.GetChunkAllRequest inValue = new ECDataUI.FileUploaderPhotoThumb.GetChunkAllRequest();
            inValue.Body = new ECDataUI.FileUploaderPhotoThumb.GetChunkAllRequestBody();
            inValue.Body.chunkID = chunkID;
            inValue.Body.docID = docID;
            inValue.Body.sroCode = sroCode;
            inValue.Body.docType = docType;
            ECDataUI.FileUploaderPhotoThumb.GetChunkAllResponse retVal = ((ECDataUI.FileUploaderPhotoThumb.FileUploaderSoap)(this)).GetChunkAll(inValue);
            return retVal.Body.GetChunkAllResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<ECDataUI.FileUploaderPhotoThumb.GetChunkAllResponse> ECDataUI.FileUploaderPhotoThumb.FileUploaderSoap.GetChunkAllAsync(ECDataUI.FileUploaderPhotoThumb.GetChunkAllRequest request) {
            return base.Channel.GetChunkAllAsync(request);
        }
        
        public System.Threading.Tasks.Task<ECDataUI.FileUploaderPhotoThumb.GetChunkAllResponse> GetChunkAllAsync(long chunkID, long docID, int sroCode, int docType) {
            ECDataUI.FileUploaderPhotoThumb.GetChunkAllRequest inValue = new ECDataUI.FileUploaderPhotoThumb.GetChunkAllRequest();
            inValue.Body = new ECDataUI.FileUploaderPhotoThumb.GetChunkAllRequestBody();
            inValue.Body.chunkID = chunkID;
            inValue.Body.docID = docID;
            inValue.Body.sroCode = sroCode;
            inValue.Body.docType = docType;
            return ((ECDataUI.FileUploaderPhotoThumb.FileUploaderSoap)(this)).GetChunkAllAsync(inValue);
        }
        
        public long GetFileSizeAll(long docID, int sroCode, int docType) {
            return base.Channel.GetFileSizeAll(docID, sroCode, docType);
        }
        
        public System.Threading.Tasks.Task<long> GetFileSizeAllAsync(long docID, int sroCode, int docType) {
            return base.Channel.GetFileSizeAllAsync(docID, sroCode, docType);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        ECDataUI.FileUploaderPhotoThumb.updateServerLogAllResponse ECDataUI.FileUploaderPhotoThumb.FileUploaderSoap.updateServerLogAll(ECDataUI.FileUploaderPhotoThumb.updateServerLogAllRequest request) {
            return base.Channel.updateServerLogAll(request);
        }
        
        public bool updateServerLogAll(long docID, int sroCode, string finalRegNumber, int docType) {
            ECDataUI.FileUploaderPhotoThumb.updateServerLogAllRequest inValue = new ECDataUI.FileUploaderPhotoThumb.updateServerLogAllRequest();
            inValue.Body = new ECDataUI.FileUploaderPhotoThumb.updateServerLogAllRequestBody();
            inValue.Body.docID = docID;
            inValue.Body.sroCode = sroCode;
            inValue.Body.finalRegNumber = finalRegNumber;
            inValue.Body.docType = docType;
            ECDataUI.FileUploaderPhotoThumb.updateServerLogAllResponse retVal = ((ECDataUI.FileUploaderPhotoThumb.FileUploaderSoap)(this)).updateServerLogAll(inValue);
            return retVal.Body.updateServerLogAllResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<ECDataUI.FileUploaderPhotoThumb.updateServerLogAllResponse> ECDataUI.FileUploaderPhotoThumb.FileUploaderSoap.updateServerLogAllAsync(ECDataUI.FileUploaderPhotoThumb.updateServerLogAllRequest request) {
            return base.Channel.updateServerLogAllAsync(request);
        }
        
        public System.Threading.Tasks.Task<ECDataUI.FileUploaderPhotoThumb.updateServerLogAllResponse> updateServerLogAllAsync(long docID, int sroCode, string finalRegNumber, int docType) {
            ECDataUI.FileUploaderPhotoThumb.updateServerLogAllRequest inValue = new ECDataUI.FileUploaderPhotoThumb.updateServerLogAllRequest();
            inValue.Body = new ECDataUI.FileUploaderPhotoThumb.updateServerLogAllRequestBody();
            inValue.Body.docID = docID;
            inValue.Body.sroCode = sroCode;
            inValue.Body.finalRegNumber = finalRegNumber;
            inValue.Body.docType = docType;
            return ((ECDataUI.FileUploaderPhotoThumb.FileUploaderSoap)(this)).updateServerLogAllAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        ECDataUI.FileUploaderPhotoThumb.AppendChunkResponse ECDataUI.FileUploaderPhotoThumb.FileUploaderSoap.AppendChunk(ECDataUI.FileUploaderPhotoThumb.AppendChunkRequest request) {
            return base.Channel.AppendChunk(request);
        }
        
        public void AppendChunk(byte[] buffer, long Offset, string finalRegNumber, long fileSize) {
            ECDataUI.FileUploaderPhotoThumb.AppendChunkRequest inValue = new ECDataUI.FileUploaderPhotoThumb.AppendChunkRequest();
            inValue.Body = new ECDataUI.FileUploaderPhotoThumb.AppendChunkRequestBody();
            inValue.Body.buffer = buffer;
            inValue.Body.Offset = Offset;
            inValue.Body.finalRegNumber = finalRegNumber;
            inValue.Body.fileSize = fileSize;
            ECDataUI.FileUploaderPhotoThumb.AppendChunkResponse retVal = ((ECDataUI.FileUploaderPhotoThumb.FileUploaderSoap)(this)).AppendChunk(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<ECDataUI.FileUploaderPhotoThumb.AppendChunkResponse> ECDataUI.FileUploaderPhotoThumb.FileUploaderSoap.AppendChunkAsync(ECDataUI.FileUploaderPhotoThumb.AppendChunkRequest request) {
            return base.Channel.AppendChunkAsync(request);
        }
        
        public System.Threading.Tasks.Task<ECDataUI.FileUploaderPhotoThumb.AppendChunkResponse> AppendChunkAsync(byte[] buffer, long Offset, string finalRegNumber, long fileSize) {
            ECDataUI.FileUploaderPhotoThumb.AppendChunkRequest inValue = new ECDataUI.FileUploaderPhotoThumb.AppendChunkRequest();
            inValue.Body = new ECDataUI.FileUploaderPhotoThumb.AppendChunkRequestBody();
            inValue.Body.buffer = buffer;
            inValue.Body.Offset = Offset;
            inValue.Body.finalRegNumber = finalRegNumber;
            inValue.Body.fileSize = fileSize;
            return ((ECDataUI.FileUploaderPhotoThumb.FileUploaderSoap)(this)).AppendChunkAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        ECDataUI.FileUploaderPhotoThumb.GetChunkResponse ECDataUI.FileUploaderPhotoThumb.FileUploaderSoap.GetChunk(ECDataUI.FileUploaderPhotoThumb.GetChunkRequest request) {
            return base.Channel.GetChunk(request);
        }
        
        public byte[] GetChunk(long chunkID, long DocID, int SroCode) {
            ECDataUI.FileUploaderPhotoThumb.GetChunkRequest inValue = new ECDataUI.FileUploaderPhotoThumb.GetChunkRequest();
            inValue.Body = new ECDataUI.FileUploaderPhotoThumb.GetChunkRequestBody();
            inValue.Body.chunkID = chunkID;
            inValue.Body.DocID = DocID;
            inValue.Body.SroCode = SroCode;
            ECDataUI.FileUploaderPhotoThumb.GetChunkResponse retVal = ((ECDataUI.FileUploaderPhotoThumb.FileUploaderSoap)(this)).GetChunk(inValue);
            return retVal.Body.GetChunkResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<ECDataUI.FileUploaderPhotoThumb.GetChunkResponse> ECDataUI.FileUploaderPhotoThumb.FileUploaderSoap.GetChunkAsync(ECDataUI.FileUploaderPhotoThumb.GetChunkRequest request) {
            return base.Channel.GetChunkAsync(request);
        }
        
        public System.Threading.Tasks.Task<ECDataUI.FileUploaderPhotoThumb.GetChunkResponse> GetChunkAsync(long chunkID, long DocID, int SroCode) {
            ECDataUI.FileUploaderPhotoThumb.GetChunkRequest inValue = new ECDataUI.FileUploaderPhotoThumb.GetChunkRequest();
            inValue.Body = new ECDataUI.FileUploaderPhotoThumb.GetChunkRequestBody();
            inValue.Body.chunkID = chunkID;
            inValue.Body.DocID = DocID;
            inValue.Body.SroCode = SroCode;
            return ((ECDataUI.FileUploaderPhotoThumb.FileUploaderSoap)(this)).GetChunkAsync(inValue);
        }
        
        public long GetFileSize(long docID, int sroCode) {
            return base.Channel.GetFileSize(docID, sroCode);
        }
        
        public System.Threading.Tasks.Task<long> GetFileSizeAsync(long docID, int sroCode) {
            return base.Channel.GetFileSizeAsync(docID, sroCode);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        ECDataUI.FileUploaderPhotoThumb.updateServerLogResponse ECDataUI.FileUploaderPhotoThumb.FileUploaderSoap.updateServerLog(ECDataUI.FileUploaderPhotoThumb.updateServerLogRequest request) {
            return base.Channel.updateServerLog(request);
        }
        
        public bool updateServerLog(long docID, int sroCode, string finalRegNumber) {
            ECDataUI.FileUploaderPhotoThumb.updateServerLogRequest inValue = new ECDataUI.FileUploaderPhotoThumb.updateServerLogRequest();
            inValue.Body = new ECDataUI.FileUploaderPhotoThumb.updateServerLogRequestBody();
            inValue.Body.docID = docID;
            inValue.Body.sroCode = sroCode;
            inValue.Body.finalRegNumber = finalRegNumber;
            ECDataUI.FileUploaderPhotoThumb.updateServerLogResponse retVal = ((ECDataUI.FileUploaderPhotoThumb.FileUploaderSoap)(this)).updateServerLog(inValue);
            return retVal.Body.updateServerLogResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<ECDataUI.FileUploaderPhotoThumb.updateServerLogResponse> ECDataUI.FileUploaderPhotoThumb.FileUploaderSoap.updateServerLogAsync(ECDataUI.FileUploaderPhotoThumb.updateServerLogRequest request) {
            return base.Channel.updateServerLogAsync(request);
        }
        
        public System.Threading.Tasks.Task<ECDataUI.FileUploaderPhotoThumb.updateServerLogResponse> updateServerLogAsync(long docID, int sroCode, string finalRegNumber) {
            ECDataUI.FileUploaderPhotoThumb.updateServerLogRequest inValue = new ECDataUI.FileUploaderPhotoThumb.updateServerLogRequest();
            inValue.Body = new ECDataUI.FileUploaderPhotoThumb.updateServerLogRequestBody();
            inValue.Body.docID = docID;
            inValue.Body.sroCode = sroCode;
            inValue.Body.finalRegNumber = finalRegNumber;
            return ((ECDataUI.FileUploaderPhotoThumb.FileUploaderSoap)(this)).updateServerLogAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        ECDataUI.FileUploaderPhotoThumb.IsValidUploadResponse ECDataUI.FileUploaderPhotoThumb.FileUploaderSoap.IsValidUpload(ECDataUI.FileUploaderPhotoThumb.IsValidUploadRequest request) {
            return base.Channel.IsValidUpload(request);
        }
        
        public bool IsValidUpload(long Documentid, int SROCode, int DocumentTypeId, char RescanModuleType, string finalRegNumber, out string errorMessage, out string RC) {
            ECDataUI.FileUploaderPhotoThumb.IsValidUploadRequest inValue = new ECDataUI.FileUploaderPhotoThumb.IsValidUploadRequest();
            inValue.Body = new ECDataUI.FileUploaderPhotoThumb.IsValidUploadRequestBody();
            inValue.Body.Documentid = Documentid;
            inValue.Body.SROCode = SROCode;
            inValue.Body.DocumentTypeId = DocumentTypeId;
            inValue.Body.RescanModuleType = RescanModuleType;
            inValue.Body.finalRegNumber = finalRegNumber;
            ECDataUI.FileUploaderPhotoThumb.IsValidUploadResponse retVal = ((ECDataUI.FileUploaderPhotoThumb.FileUploaderSoap)(this)).IsValidUpload(inValue);
            errorMessage = retVal.Body.errorMessage;
            RC = retVal.Body.RC;
            return retVal.Body.IsValidUploadResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<ECDataUI.FileUploaderPhotoThumb.IsValidUploadResponse> ECDataUI.FileUploaderPhotoThumb.FileUploaderSoap.IsValidUploadAsync(ECDataUI.FileUploaderPhotoThumb.IsValidUploadRequest request) {
            return base.Channel.IsValidUploadAsync(request);
        }
        
        public System.Threading.Tasks.Task<ECDataUI.FileUploaderPhotoThumb.IsValidUploadResponse> IsValidUploadAsync(long Documentid, int SROCode, int DocumentTypeId, char RescanModuleType, string finalRegNumber) {
            ECDataUI.FileUploaderPhotoThumb.IsValidUploadRequest inValue = new ECDataUI.FileUploaderPhotoThumb.IsValidUploadRequest();
            inValue.Body = new ECDataUI.FileUploaderPhotoThumb.IsValidUploadRequestBody();
            inValue.Body.Documentid = Documentid;
            inValue.Body.SROCode = SROCode;
            inValue.Body.DocumentTypeId = DocumentTypeId;
            inValue.Body.RescanModuleType = RescanModuleType;
            inValue.Body.finalRegNumber = finalRegNumber;
            return ((ECDataUI.FileUploaderPhotoThumb.FileUploaderSoap)(this)).IsValidUploadAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        ECDataUI.FileUploaderPhotoThumb.SupportAllUploadResponse ECDataUI.FileUploaderPhotoThumb.FileUploaderSoap.SupportAllUpload(ECDataUI.FileUploaderPhotoThumb.SupportAllUploadRequest request) {
            return base.Channel.SupportAllUpload(request);
        }
        
        public void SupportAllUpload(byte[] buffer, long offset, string fileName, long fileSize, long DocumentID, string SroTriletter, string EnclosureType, ref string FinalPath) {
            ECDataUI.FileUploaderPhotoThumb.SupportAllUploadRequest inValue = new ECDataUI.FileUploaderPhotoThumb.SupportAllUploadRequest();
            inValue.Body = new ECDataUI.FileUploaderPhotoThumb.SupportAllUploadRequestBody();
            inValue.Body.buffer = buffer;
            inValue.Body.offset = offset;
            inValue.Body.fileName = fileName;
            inValue.Body.fileSize = fileSize;
            inValue.Body.DocumentID = DocumentID;
            inValue.Body.SroTriletter = SroTriletter;
            inValue.Body.EnclosureType = EnclosureType;
            inValue.Body.FinalPath = FinalPath;
            ECDataUI.FileUploaderPhotoThumb.SupportAllUploadResponse retVal = ((ECDataUI.FileUploaderPhotoThumb.FileUploaderSoap)(this)).SupportAllUpload(inValue);
            FinalPath = retVal.Body.FinalPath;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<ECDataUI.FileUploaderPhotoThumb.SupportAllUploadResponse> ECDataUI.FileUploaderPhotoThumb.FileUploaderSoap.SupportAllUploadAsync(ECDataUI.FileUploaderPhotoThumb.SupportAllUploadRequest request) {
            return base.Channel.SupportAllUploadAsync(request);
        }
        
        public System.Threading.Tasks.Task<ECDataUI.FileUploaderPhotoThumb.SupportAllUploadResponse> SupportAllUploadAsync(byte[] buffer, long offset, string fileName, long fileSize, long DocumentID, string SroTriletter, string EnclosureType, string FinalPath) {
            ECDataUI.FileUploaderPhotoThumb.SupportAllUploadRequest inValue = new ECDataUI.FileUploaderPhotoThumb.SupportAllUploadRequest();
            inValue.Body = new ECDataUI.FileUploaderPhotoThumb.SupportAllUploadRequestBody();
            inValue.Body.buffer = buffer;
            inValue.Body.offset = offset;
            inValue.Body.fileName = fileName;
            inValue.Body.fileSize = fileSize;
            inValue.Body.DocumentID = DocumentID;
            inValue.Body.SroTriletter = SroTriletter;
            inValue.Body.EnclosureType = EnclosureType;
            inValue.Body.FinalPath = FinalPath;
            return ((ECDataUI.FileUploaderPhotoThumb.FileUploaderSoap)(this)).SupportAllUploadAsync(inValue);
        }
        
        public bool IsFileExists(long SroCode, long DocumentID, long SupportDocumentID, long PartyID) {
            return base.Channel.IsFileExists(SroCode, DocumentID, SupportDocumentID, PartyID);
        }
        
        public System.Threading.Tasks.Task<bool> IsFileExistsAsync(long SroCode, long DocumentID, long SupportDocumentID, long PartyID) {
            return base.Channel.IsFileExistsAsync(SroCode, DocumentID, SupportDocumentID, PartyID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        ECDataUI.FileUploaderPhotoThumb.SupportAllDownloadResponse ECDataUI.FileUploaderPhotoThumb.FileUploaderSoap.SupportAllDownload(ECDataUI.FileUploaderPhotoThumb.SupportAllDownloadRequest request) {
            return base.Channel.SupportAllDownload(request);
        }
        
        public byte[] SupportAllDownload(long DocID, long SupportDocID, int SROCode, long PartyID) {
            ECDataUI.FileUploaderPhotoThumb.SupportAllDownloadRequest inValue = new ECDataUI.FileUploaderPhotoThumb.SupportAllDownloadRequest();
            inValue.Body = new ECDataUI.FileUploaderPhotoThumb.SupportAllDownloadRequestBody();
            inValue.Body.DocID = DocID;
            inValue.Body.SupportDocID = SupportDocID;
            inValue.Body.SROCode = SROCode;
            inValue.Body.PartyID = PartyID;
            ECDataUI.FileUploaderPhotoThumb.SupportAllDownloadResponse retVal = ((ECDataUI.FileUploaderPhotoThumb.FileUploaderSoap)(this)).SupportAllDownload(inValue);
            return retVal.Body.SupportAllDownloadResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<ECDataUI.FileUploaderPhotoThumb.SupportAllDownloadResponse> ECDataUI.FileUploaderPhotoThumb.FileUploaderSoap.SupportAllDownloadAsync(ECDataUI.FileUploaderPhotoThumb.SupportAllDownloadRequest request) {
            return base.Channel.SupportAllDownloadAsync(request);
        }
        
        public System.Threading.Tasks.Task<ECDataUI.FileUploaderPhotoThumb.SupportAllDownloadResponse> SupportAllDownloadAsync(long DocID, long SupportDocID, int SROCode, long PartyID) {
            ECDataUI.FileUploaderPhotoThumb.SupportAllDownloadRequest inValue = new ECDataUI.FileUploaderPhotoThumb.SupportAllDownloadRequest();
            inValue.Body = new ECDataUI.FileUploaderPhotoThumb.SupportAllDownloadRequestBody();
            inValue.Body.DocID = DocID;
            inValue.Body.SupportDocID = SupportDocID;
            inValue.Body.SROCode = SROCode;
            inValue.Body.PartyID = PartyID;
            return ((ECDataUI.FileUploaderPhotoThumb.FileUploaderSoap)(this)).SupportAllDownloadAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        ECDataUI.FileUploaderPhotoThumb.SaveUploadedFilePathResponse ECDataUI.FileUploaderPhotoThumb.FileUploaderSoap.SaveUploadedFilePath(ECDataUI.FileUploaderPhotoThumb.SaveUploadedFilePathRequest request) {
            return base.Channel.SaveUploadedFilePath(request);
        }
        
        public bool SaveUploadedFilePath(long DocID, long SroCode, int SupportDocID, System.DateTime UpdateDateTime, string physicalPath, string VirtualPath, long PartyID) {
            ECDataUI.FileUploaderPhotoThumb.SaveUploadedFilePathRequest inValue = new ECDataUI.FileUploaderPhotoThumb.SaveUploadedFilePathRequest();
            inValue.Body = new ECDataUI.FileUploaderPhotoThumb.SaveUploadedFilePathRequestBody();
            inValue.Body.DocID = DocID;
            inValue.Body.SroCode = SroCode;
            inValue.Body.SupportDocID = SupportDocID;
            inValue.Body.UpdateDateTime = UpdateDateTime;
            inValue.Body.physicalPath = physicalPath;
            inValue.Body.VirtualPath = VirtualPath;
            inValue.Body.PartyID = PartyID;
            ECDataUI.FileUploaderPhotoThumb.SaveUploadedFilePathResponse retVal = ((ECDataUI.FileUploaderPhotoThumb.FileUploaderSoap)(this)).SaveUploadedFilePath(inValue);
            return retVal.Body.SaveUploadedFilePathResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<ECDataUI.FileUploaderPhotoThumb.SaveUploadedFilePathResponse> ECDataUI.FileUploaderPhotoThumb.FileUploaderSoap.SaveUploadedFilePathAsync(ECDataUI.FileUploaderPhotoThumb.SaveUploadedFilePathRequest request) {
            return base.Channel.SaveUploadedFilePathAsync(request);
        }
        
        public System.Threading.Tasks.Task<ECDataUI.FileUploaderPhotoThumb.SaveUploadedFilePathResponse> SaveUploadedFilePathAsync(long DocID, long SroCode, int SupportDocID, System.DateTime UpdateDateTime, string physicalPath, string VirtualPath, long PartyID) {
            ECDataUI.FileUploaderPhotoThumb.SaveUploadedFilePathRequest inValue = new ECDataUI.FileUploaderPhotoThumb.SaveUploadedFilePathRequest();
            inValue.Body = new ECDataUI.FileUploaderPhotoThumb.SaveUploadedFilePathRequestBody();
            inValue.Body.DocID = DocID;
            inValue.Body.SroCode = SroCode;
            inValue.Body.SupportDocID = SupportDocID;
            inValue.Body.UpdateDateTime = UpdateDateTime;
            inValue.Body.physicalPath = physicalPath;
            inValue.Body.VirtualPath = VirtualPath;
            inValue.Body.PartyID = PartyID;
            return ((ECDataUI.FileUploaderPhotoThumb.FileUploaderSoap)(this)).SaveUploadedFilePathAsync(inValue);
        }
        
        public int GetUploadedEnclosureCnt(long DocumentID, int SROCode, int SupportDocID, int EnclosureType) {
            return base.Channel.GetUploadedEnclosureCnt(DocumentID, SROCode, SupportDocID, EnclosureType);
        }
        
        public System.Threading.Tasks.Task<int> GetUploadedEnclosureCntAsync(long DocumentID, int SROCode, int SupportDocID, int EnclosureType) {
            return base.Channel.GetUploadedEnclosureCntAsync(DocumentID, SROCode, SupportDocID, EnclosureType);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        ECDataUI.FileUploaderPhotoThumb.IsSpaceAvailableonDriveResponse ECDataUI.FileUploaderPhotoThumb.FileUploaderSoap.IsSpaceAvailableonDrive(ECDataUI.FileUploaderPhotoThumb.IsSpaceAvailableonDriveRequest request) {
            return base.Channel.IsSpaceAvailableonDrive(request);
        }
        
        public bool IsSpaceAvailableonDrive(long FileSize, ref string errorMessage) {
            ECDataUI.FileUploaderPhotoThumb.IsSpaceAvailableonDriveRequest inValue = new ECDataUI.FileUploaderPhotoThumb.IsSpaceAvailableonDriveRequest();
            inValue.Body = new ECDataUI.FileUploaderPhotoThumb.IsSpaceAvailableonDriveRequestBody();
            inValue.Body.FileSize = FileSize;
            inValue.Body.errorMessage = errorMessage;
            ECDataUI.FileUploaderPhotoThumb.IsSpaceAvailableonDriveResponse retVal = ((ECDataUI.FileUploaderPhotoThumb.FileUploaderSoap)(this)).IsSpaceAvailableonDrive(inValue);
            errorMessage = retVal.Body.errorMessage;
            return retVal.Body.IsSpaceAvailableonDriveResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<ECDataUI.FileUploaderPhotoThumb.IsSpaceAvailableonDriveResponse> ECDataUI.FileUploaderPhotoThumb.FileUploaderSoap.IsSpaceAvailableonDriveAsync(ECDataUI.FileUploaderPhotoThumb.IsSpaceAvailableonDriveRequest request) {
            return base.Channel.IsSpaceAvailableonDriveAsync(request);
        }
        
        public System.Threading.Tasks.Task<ECDataUI.FileUploaderPhotoThumb.IsSpaceAvailableonDriveResponse> IsSpaceAvailableonDriveAsync(long FileSize, string errorMessage) {
            ECDataUI.FileUploaderPhotoThumb.IsSpaceAvailableonDriveRequest inValue = new ECDataUI.FileUploaderPhotoThumb.IsSpaceAvailableonDriveRequest();
            inValue.Body = new ECDataUI.FileUploaderPhotoThumb.IsSpaceAvailableonDriveRequestBody();
            inValue.Body.FileSize = FileSize;
            inValue.Body.errorMessage = errorMessage;
            return ((ECDataUI.FileUploaderPhotoThumb.FileUploaderSoap)(this)).IsSpaceAvailableonDriveAsync(inValue);
        }
        
        public long GetEnclosureFileSize(long SroCode, long DocumentID, long SupportDocumentID, long PartyID) {
            return base.Channel.GetEnclosureFileSize(SroCode, DocumentID, SupportDocumentID, PartyID);
        }
        
        public System.Threading.Tasks.Task<long> GetEnclosureFileSizeAsync(long SroCode, long DocumentID, long SupportDocumentID, long PartyID) {
            return base.Channel.GetEnclosureFileSizeAsync(SroCode, DocumentID, SupportDocumentID, PartyID);
        }
        
        public bool IsFileExistAndNotRescanningEnabled(long DocumentId, int DocumentTypeID, int SROCode) {
            return base.Channel.IsFileExistAndNotRescanningEnabled(DocumentId, DocumentTypeID, SROCode);
        }
        
        public System.Threading.Tasks.Task<bool> IsFileExistAndNotRescanningEnabledAsync(long DocumentId, int DocumentTypeID, int SROCode) {
            return base.Channel.IsFileExistAndNotRescanningEnabledAsync(DocumentId, DocumentTypeID, SROCode);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        ECDataUI.FileUploaderPhotoThumb.AppendChunkAllFormIIIResponse ECDataUI.FileUploaderPhotoThumb.FileUploaderSoap.AppendChunkAllFormIII(ECDataUI.FileUploaderPhotoThumb.AppendChunkAllFormIIIRequest request) {
            return base.Channel.AppendChunkAllFormIII(request);
        }
        
        public void AppendChunkAllFormIII(byte[] buffer, long offset, string finalRegNumber, long fileSize, int docType, int sroCode, string VersionNumber) {
            ECDataUI.FileUploaderPhotoThumb.AppendChunkAllFormIIIRequest inValue = new ECDataUI.FileUploaderPhotoThumb.AppendChunkAllFormIIIRequest();
            inValue.Body = new ECDataUI.FileUploaderPhotoThumb.AppendChunkAllFormIIIRequestBody();
            inValue.Body.buffer = buffer;
            inValue.Body.offset = offset;
            inValue.Body.finalRegNumber = finalRegNumber;
            inValue.Body.fileSize = fileSize;
            inValue.Body.docType = docType;
            inValue.Body.sroCode = sroCode;
            inValue.Body.VersionNumber = VersionNumber;
            ECDataUI.FileUploaderPhotoThumb.AppendChunkAllFormIIIResponse retVal = ((ECDataUI.FileUploaderPhotoThumb.FileUploaderSoap)(this)).AppendChunkAllFormIII(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<ECDataUI.FileUploaderPhotoThumb.AppendChunkAllFormIIIResponse> ECDataUI.FileUploaderPhotoThumb.FileUploaderSoap.AppendChunkAllFormIIIAsync(ECDataUI.FileUploaderPhotoThumb.AppendChunkAllFormIIIRequest request) {
            return base.Channel.AppendChunkAllFormIIIAsync(request);
        }
        
        public System.Threading.Tasks.Task<ECDataUI.FileUploaderPhotoThumb.AppendChunkAllFormIIIResponse> AppendChunkAllFormIIIAsync(byte[] buffer, long offset, string finalRegNumber, long fileSize, int docType, int sroCode, string VersionNumber) {
            ECDataUI.FileUploaderPhotoThumb.AppendChunkAllFormIIIRequest inValue = new ECDataUI.FileUploaderPhotoThumb.AppendChunkAllFormIIIRequest();
            inValue.Body = new ECDataUI.FileUploaderPhotoThumb.AppendChunkAllFormIIIRequestBody();
            inValue.Body.buffer = buffer;
            inValue.Body.offset = offset;
            inValue.Body.finalRegNumber = finalRegNumber;
            inValue.Body.fileSize = fileSize;
            inValue.Body.docType = docType;
            inValue.Body.sroCode = sroCode;
            inValue.Body.VersionNumber = VersionNumber;
            return ((ECDataUI.FileUploaderPhotoThumb.FileUploaderSoap)(this)).AppendChunkAllFormIIIAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        ECDataUI.FileUploaderPhotoThumb.updateServerLogAllFormIIIResponse ECDataUI.FileUploaderPhotoThumb.FileUploaderSoap.updateServerLogAllFormIII(ECDataUI.FileUploaderPhotoThumb.updateServerLogAllFormIIIRequest request) {
            return base.Channel.updateServerLogAllFormIII(request);
        }
        
        public bool updateServerLogAllFormIII(long docID, int sroCode, string finalRegNumber, int docType) {
            ECDataUI.FileUploaderPhotoThumb.updateServerLogAllFormIIIRequest inValue = new ECDataUI.FileUploaderPhotoThumb.updateServerLogAllFormIIIRequest();
            inValue.Body = new ECDataUI.FileUploaderPhotoThumb.updateServerLogAllFormIIIRequestBody();
            inValue.Body.docID = docID;
            inValue.Body.sroCode = sroCode;
            inValue.Body.finalRegNumber = finalRegNumber;
            inValue.Body.docType = docType;
            ECDataUI.FileUploaderPhotoThumb.updateServerLogAllFormIIIResponse retVal = ((ECDataUI.FileUploaderPhotoThumb.FileUploaderSoap)(this)).updateServerLogAllFormIII(inValue);
            return retVal.Body.updateServerLogAllFormIIIResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<ECDataUI.FileUploaderPhotoThumb.updateServerLogAllFormIIIResponse> ECDataUI.FileUploaderPhotoThumb.FileUploaderSoap.updateServerLogAllFormIIIAsync(ECDataUI.FileUploaderPhotoThumb.updateServerLogAllFormIIIRequest request) {
            return base.Channel.updateServerLogAllFormIIIAsync(request);
        }
        
        public System.Threading.Tasks.Task<ECDataUI.FileUploaderPhotoThumb.updateServerLogAllFormIIIResponse> updateServerLogAllFormIIIAsync(long docID, int sroCode, string finalRegNumber, int docType) {
            ECDataUI.FileUploaderPhotoThumb.updateServerLogAllFormIIIRequest inValue = new ECDataUI.FileUploaderPhotoThumb.updateServerLogAllFormIIIRequest();
            inValue.Body = new ECDataUI.FileUploaderPhotoThumb.updateServerLogAllFormIIIRequestBody();
            inValue.Body.docID = docID;
            inValue.Body.sroCode = sroCode;
            inValue.Body.finalRegNumber = finalRegNumber;
            inValue.Body.docType = docType;
            return ((ECDataUI.FileUploaderPhotoThumb.FileUploaderSoap)(this)).updateServerLogAllFormIIIAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        ECDataUI.FileUploaderPhotoThumb.DownloadScannedPhotoThumbResponse ECDataUI.FileUploaderPhotoThumb.FileUploaderSoap.DownloadScannedPhotoThumb(ECDataUI.FileUploaderPhotoThumb.DownloadScannedPhotoThumbRequest request) {
            return base.Channel.DownloadScannedPhotoThumb(request);
        }
        
        public byte[] DownloadScannedPhotoThumb(string filePath) {
            ECDataUI.FileUploaderPhotoThumb.DownloadScannedPhotoThumbRequest inValue = new ECDataUI.FileUploaderPhotoThumb.DownloadScannedPhotoThumbRequest();
            inValue.Body = new ECDataUI.FileUploaderPhotoThumb.DownloadScannedPhotoThumbRequestBody();
            inValue.Body.filePath = filePath;
            ECDataUI.FileUploaderPhotoThumb.DownloadScannedPhotoThumbResponse retVal = ((ECDataUI.FileUploaderPhotoThumb.FileUploaderSoap)(this)).DownloadScannedPhotoThumb(inValue);
            return retVal.Body.DownloadScannedPhotoThumbResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<ECDataUI.FileUploaderPhotoThumb.DownloadScannedPhotoThumbResponse> ECDataUI.FileUploaderPhotoThumb.FileUploaderSoap.DownloadScannedPhotoThumbAsync(ECDataUI.FileUploaderPhotoThumb.DownloadScannedPhotoThumbRequest request) {
            return base.Channel.DownloadScannedPhotoThumbAsync(request);
        }
        
        public System.Threading.Tasks.Task<ECDataUI.FileUploaderPhotoThumb.DownloadScannedPhotoThumbResponse> DownloadScannedPhotoThumbAsync(string filePath) {
            ECDataUI.FileUploaderPhotoThumb.DownloadScannedPhotoThumbRequest inValue = new ECDataUI.FileUploaderPhotoThumb.DownloadScannedPhotoThumbRequest();
            inValue.Body = new ECDataUI.FileUploaderPhotoThumb.DownloadScannedPhotoThumbRequestBody();
            inValue.Body.filePath = filePath;
            return ((ECDataUI.FileUploaderPhotoThumb.FileUploaderSoap)(this)).DownloadScannedPhotoThumbAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        ECDataUI.FileUploaderPhotoThumb.PhotoThumbUploadResponse ECDataUI.FileUploaderPhotoThumb.FileUploaderSoap.PhotoThumbUpload(ECDataUI.FileUploaderPhotoThumb.PhotoThumbUploadRequest request) {
            return base.Channel.PhotoThumbUpload(request);
        }
        
        public bool PhotoThumbUpload(byte[] buffer, int sroCode, long partyid, bool IsPhoto, bool IsThumb, long DocumentID) {
            ECDataUI.FileUploaderPhotoThumb.PhotoThumbUploadRequest inValue = new ECDataUI.FileUploaderPhotoThumb.PhotoThumbUploadRequest();
            inValue.Body = new ECDataUI.FileUploaderPhotoThumb.PhotoThumbUploadRequestBody();
            inValue.Body.buffer = buffer;
            inValue.Body.sroCode = sroCode;
            inValue.Body.partyid = partyid;
            inValue.Body.IsPhoto = IsPhoto;
            inValue.Body.IsThumb = IsThumb;
            inValue.Body.DocumentID = DocumentID;
            ECDataUI.FileUploaderPhotoThumb.PhotoThumbUploadResponse retVal = ((ECDataUI.FileUploaderPhotoThumb.FileUploaderSoap)(this)).PhotoThumbUpload(inValue);
            return retVal.Body.PhotoThumbUploadResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<ECDataUI.FileUploaderPhotoThumb.PhotoThumbUploadResponse> ECDataUI.FileUploaderPhotoThumb.FileUploaderSoap.PhotoThumbUploadAsync(ECDataUI.FileUploaderPhotoThumb.PhotoThumbUploadRequest request) {
            return base.Channel.PhotoThumbUploadAsync(request);
        }
        
        public System.Threading.Tasks.Task<ECDataUI.FileUploaderPhotoThumb.PhotoThumbUploadResponse> PhotoThumbUploadAsync(byte[] buffer, int sroCode, long partyid, bool IsPhoto, bool IsThumb, long DocumentID) {
            ECDataUI.FileUploaderPhotoThumb.PhotoThumbUploadRequest inValue = new ECDataUI.FileUploaderPhotoThumb.PhotoThumbUploadRequest();
            inValue.Body = new ECDataUI.FileUploaderPhotoThumb.PhotoThumbUploadRequestBody();
            inValue.Body.buffer = buffer;
            inValue.Body.sroCode = sroCode;
            inValue.Body.partyid = partyid;
            inValue.Body.IsPhoto = IsPhoto;
            inValue.Body.IsThumb = IsThumb;
            inValue.Body.DocumentID = DocumentID;
            return ((ECDataUI.FileUploaderPhotoThumb.FileUploaderSoap)(this)).PhotoThumbUploadAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        ECDataUI.FileUploaderPhotoThumb.IsPhotoThumbAvailableResponse ECDataUI.FileUploaderPhotoThumb.FileUploaderSoap.IsPhotoThumbAvailable(ECDataUI.FileUploaderPhotoThumb.IsPhotoThumbAvailableRequest request) {
            return base.Channel.IsPhotoThumbAvailable(request);
        }
        
        public string IsPhotoThumbAvailable(string JSONObj) {
            ECDataUI.FileUploaderPhotoThumb.IsPhotoThumbAvailableRequest inValue = new ECDataUI.FileUploaderPhotoThumb.IsPhotoThumbAvailableRequest();
            inValue.Body = new ECDataUI.FileUploaderPhotoThumb.IsPhotoThumbAvailableRequestBody();
            inValue.Body.JSONObj = JSONObj;
            ECDataUI.FileUploaderPhotoThumb.IsPhotoThumbAvailableResponse retVal = ((ECDataUI.FileUploaderPhotoThumb.FileUploaderSoap)(this)).IsPhotoThumbAvailable(inValue);
            return retVal.Body.IsPhotoThumbAvailableResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<ECDataUI.FileUploaderPhotoThumb.IsPhotoThumbAvailableResponse> ECDataUI.FileUploaderPhotoThumb.FileUploaderSoap.IsPhotoThumbAvailableAsync(ECDataUI.FileUploaderPhotoThumb.IsPhotoThumbAvailableRequest request) {
            return base.Channel.IsPhotoThumbAvailableAsync(request);
        }
        
        public System.Threading.Tasks.Task<ECDataUI.FileUploaderPhotoThumb.IsPhotoThumbAvailableResponse> IsPhotoThumbAvailableAsync(string JSONObj) {
            ECDataUI.FileUploaderPhotoThumb.IsPhotoThumbAvailableRequest inValue = new ECDataUI.FileUploaderPhotoThumb.IsPhotoThumbAvailableRequest();
            inValue.Body = new ECDataUI.FileUploaderPhotoThumb.IsPhotoThumbAvailableRequestBody();
            inValue.Body.JSONObj = JSONObj;
            return ((ECDataUI.FileUploaderPhotoThumb.FileUploaderSoap)(this)).IsPhotoThumbAvailableAsync(inValue);
        }
    }
}
